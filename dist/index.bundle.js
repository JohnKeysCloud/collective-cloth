/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={333:(t,e,r)=>{"use strict";const n=r(53),o=r(768);t.exports=n,t.exports.Client=o},768:(t,e,r)=>{"use strict";const n=r(425),o=r(498),{helpers:{mergeData:i},classes:{Response:s,ResponseError:a}}=r(791),c={eu:"https://api.eu.sendgrid.com/",global:"https://api.sendgrid.com/"};t.exports=class{constructor(){this.auth="",this.impersonateSubuser="",this.sendgrid_region="global",this.defaultHeaders={Accept:"application/json","Content-Type":"application/json","User-Agent":"sendgrid/"+o.version+";nodejs"},this.defaultRequest={baseUrl:"https://api.sendgrid.com/",url:"",method:"GET",headers:{},maxContentLength:1/0,maxBodyLength:1/0}}setApiKey(t){this.auth="Bearer "+t,this.setDefaultRequest("baseUrl",c[this.sendgrid_region]),this.isValidApiKey(t)||console.warn('API key does not start with "SG.".')}setTwilioEmailAuth(t,e){const r=Buffer.from(t+":"+e).toString("base64");this.auth="Basic "+r,this.setDefaultRequest("baseUrl","https://email.twilio.com/"),this.isValidTwilioAuth(t,e)||console.warn("Twilio Email credentials must be non-empty strings.")}isValidApiKey(t){return this.isString(t)&&t.trim().startsWith("SG.")}isValidTwilioAuth(t,e){return this.isString(t)&&t&&this.isString(e)&&e}isString(t){return"string"==typeof t||t instanceof String}setImpersonateSubuser(t){this.impersonateSubuser=t}setDefaultHeader(t,e){return null!==t&&"object"==typeof t?(Object.assign(this.defaultHeaders,t),this):(this.defaultHeaders[t]=e,this)}setDefaultRequest(t,e){return null!==t&&"object"==typeof t?(Object.assign(this.defaultRequest,t),this):(this.defaultRequest[t]=e,this)}setDataResidency(t){return c.hasOwnProperty(t)?(this.sendgrid_region=t,this.setDefaultRequest("baseUrl",c[t])):console.warn('Region can only be "global" or "eu".'),this}createHeaders(t){const e=i(this.defaultHeaders,t);return void 0===e.Authorization&&this.auth&&(e.Authorization=this.auth),this.impersonateSubuser&&(e["On-Behalf-Of"]=this.impersonateSubuser),e}createRequest(t){let e={url:t.uri||t.url,baseUrl:t.baseUrl,method:t.method,data:t.body,params:t.qs,headers:t.headers};return e=i(this.defaultRequest,e),e.headers=this.createHeaders(e.headers),e.baseURL=e.baseUrl,delete e.baseUrl,e}request(t,e){t=this.createRequest(t);const r=new Promise(((e,r)=>{n(t).then((t=>e([new s(t.status,t.data,t.headers),t.data]))).catch((t=>t.response&&t.response.status>=400?r(new a(t.response)):r(t)))}));if(e&&"function"!=typeof e)throw new Error("Callback passed is not a function.");return e?r.then((t=>e(null,t))).catch((t=>e(t,null))):r}}},53:(t,e,r)=>{"use strict";const n=r(768);t.exports=new n},607:(t,e,r)=>{"use strict";const n=r(304),o=r(938),i=r(727),s=r(551),a=r(975);t.exports=class{constructor(t){t&&this.fromData(t)}fromData(t){if("object"!=typeof t)throw new Error("Expecting object for Mail data");t=i(t),t=n(t);const{content:e,filename:r,type:o,disposition:s,contentId:a,filePath:c}=t;if(void 0!==e&&void 0!==c)throw new Error("The props 'content' and 'filePath' cannot be used together.");this.setFilename(r),this.setType(o),this.setDisposition(s),this.setContentId(a),this.setContent(c?this.readFile(c):e)}readFile(t){return s.readFileSync(a.resolve(t))}setContent(t){if("string"!=typeof t){if(t instanceof Buffer&&void 0!==t.toString)return this.content=t.toString(),void("attachment"===this.disposition&&(this.content=t.toString("base64")));throw new Error("`content` expected to be either Buffer or string")}this.content=t}setFileContent(t){if(!(t instanceof Buffer&&void 0!==t.toString))throw new Error("`content` expected to be Buffer");this.content=t.toString("base64")}setFilename(t){if(void 0!==t){if(t&&"string"!=typeof t)throw new Error("String expected for `filename`");this.filename=t}}setType(t){if(void 0!==t){if("string"!=typeof t)throw new Error("String expected for `type`");this.type=t}}setDisposition(t){if(void 0!==t){if("string"!=typeof t)throw new Error("String expected for `disposition`");this.disposition=t}}setContentId(t){if(void 0!==t){if("string"!=typeof t)throw new Error("String expected for `contentId`");this.contentId=t}}toJSON(){const{content:t,filename:e,type:r,disposition:n,contentId:i}=this,s={content:t,filename:e};return void 0!==r&&(s.type=r),void 0!==n&&(s.disposition=n),void 0!==i&&(s.contentId=i),o(s)}}},241:(t,e,r)=>{"use strict";const n=r(588);class o{constructor(t){t&&this.fromData(t)}fromData(t){if("string"==typeof t){const[e,r]=n(t);t={name:e,email:r}}if("object"!=typeof t)throw new Error("Expecting object or string for EmailAddress data");const{name:e,email:r}=t;this.setEmail(r),this.setName(e)}setName(t){if(void 0!==t){if("string"!=typeof t)throw new Error("String expected for `name`");this.name=t}}setEmail(t){if(void 0===t)throw new Error("Must provide `email`");if("string"!=typeof t)throw new Error("String expected for `email`");this.email=t}toJSON(){const{email:t,name:e}=this,r={email:t};return""!==e&&(r.name=e),r}static create(t){return Array.isArray(t)?t.filter((t=>!!t)).map((t=>this.create(t))):t instanceof o?t:new o(t)}}t.exports=o},424:(t,e,r)=>{"use strict";const n=r(607),o=r(241),i=r(649),s=r(400),a=r(713),c=r(598),l=r(21);t.exports={Attachment:n,EmailAddress:o,Mail:i,Personalization:s,Response:a,ResponseError:c,Statistics:l}},649:(t,e,r)=>{"use strict";const n=r(241),o=r(400),i=r(304),s=r(938),a=r(727),c=r(995),{DYNAMIC_TEMPLATE_CHAR_WARNING:l}=r(49),{validateMailSettings:u,validateTrackingSettings:d}=r(357);class f{constructor(t){this.isDynamic=!1,this.hideWarnings=!1,this.personalizations=[],this.attachments=[],this.content=[],this.categories=[],this.headers={},this.sections={},this.customArgs={},this.trackingSettings={},this.mailSettings={},this.asm={},this.substitutions=null,this.substitutionWrappers=null,this.dynamicTemplateData=null,t&&this.fromData(t)}fromData(t){if("object"!=typeof t)throw new Error("Expecting object for Mail data");t=a(t),t=i(t,["substitutions","dynamicTemplateData","customArgs","headers","sections"]);const{to:e,from:r,replyTo:n,cc:o,bcc:s,sendAt:c,subject:l,text:u,html:d,content:f,templateId:h,personalizations:p,attachments:m,ipPoolName:g,batchId:y,sections:b,headers:v,categories:w,category:E,customArgs:A,asm:S,mailSettings:x,trackingSettings:C,substitutions:O,substitutionWrappers:T,dynamicTemplateData:j,isMultiple:k,hideWarnings:L,replyToList:D}=t;this.setFrom(r),this.setReplyTo(n),this.setSubject(l),this.setSendAt(c),this.setTemplateId(h),this.setBatchId(y),this.setIpPoolName(g),this.setAttachments(m),this.setContent(f),this.setSections(b),this.setHeaders(v),this.setCategories(E),this.setCategories(w),this.setCustomArgs(A),this.setAsm(S),this.setMailSettings(x),this.setTrackingSettings(C),this.setHideWarnings(L),this.setReplyToList(D),this.isDynamic?this.setDynamicTemplateData(j):(this.setSubstitutions(O),this.setSubstitutionWrappers(T)),this.addTextContent(u),this.addHtmlContent(d),p?this.setPersonalizations(p):k&&Array.isArray(e)?e.forEach((t=>this.addTo(t,o,s))):this.addTo(e,o,s)}setFrom(t){if(this._checkProperty("from",t,[this._checkUndefined])){if("string"!=typeof t&&"string"!=typeof t.email)throw new Error("String or address object expected for `from`");this.from=n.create(t)}}setReplyTo(t){if(this._checkProperty("replyTo",t,[this._checkUndefined])){if("string"!=typeof t&&"string"!=typeof t.email)throw new Error("String or address object expected for `replyTo`");this.replyTo=n.create(t)}}setSubject(t){this._setProperty("subject",t,"string")}setSendAt(t){this._checkProperty("sendAt",t,[this._checkUndefined,this._createCheckThatThrows(Number.isInteger,"Integer expected for `sendAt`")])&&(this.sendAt=t)}setTemplateId(t){this._setProperty("templateId",t,"string")&&0===t.indexOf("d-")&&(this.isDynamic=!0)}setBatchId(t){this._setProperty("batchId",t,"string")}setIpPoolName(t){this._setProperty("ipPoolName",t,"string")}setAsm(t){if(this._checkProperty("asm",t,[this._checkUndefined,this._createTypeCheck("object")])){if("number"!=typeof t.groupId)throw new Error("Expected `asm` to include an integer in its `groupId` field");if(t.groupsToDisplay&&(!Array.isArray(t.groupsToDisplay)||!t.groupsToDisplay.every((t=>"number"==typeof t))))throw new Error("Array of integers expected for `asm.groupsToDisplay`");this.asm=t}}setPersonalizations(t){if(this._doArrayCheck("personalizations",t)){if(!t.every((t=>"object"==typeof t)))throw new Error("Array of objects expected for `personalizations`");this.personalizations=[],t.forEach((t=>this.addPersonalization(t)))}}addPersonalization(t){this.isDynamic&&t.substitutions?delete t.substitutions:!this.isDynamic&&t.dynamicTemplateData&&delete t.dynamicTemplateData,t instanceof o||(t=new o(t)),this.isDynamic?this.applyDynamicTemplateData(t):this.applySubstitutions(t),this.personalizations.push(t)}addTo(t,e,r){if(void 0===t&&void 0===e&&void 0===r)throw new Error("Provide at least one of to, cc or bcc");this.addPersonalization(new o({to:t,cc:e,bcc:r}))}setSubstitutions(t){this._setProperty("substitutions",t,"object")}setSubstitutionWrappers(t){this._checkProperty("substitutionWrappers",t,[this._checkUndefined,(t,e)=>{if(!Array.isArray(e)||2!==e.length)throw new Error("Array expected with two elements for `"+t+"`")}])&&(this.substitutionWrappers=t)}applySubstitutions(t){t instanceof o&&(t.reverseMergeSubstitutions(this.substitutions),t.setSubstitutionWrappers(this.substitutionWrappers))}applyDynamicTemplateData(t){t instanceof o&&t.deepMergeDynamicTemplateData(this.dynamicTemplateData)}setDynamicTemplateData(t){if(void 0!==t){if("object"!=typeof t)throw new Error("Object expected for `dynamicTemplateData`");this.hideWarnings||Object.values(t).forEach((t=>{/['"&]/.test(t)&&console.warn(l)})),this.dynamicTemplateData=t}}setContent(t){if(this._doArrayCheck("content",t)){if(!t.every((t=>"object"==typeof t)))throw new Error("Expected each entry in `content` to be an object");if(!t.every((t=>"string"==typeof t.type)))throw new Error("Expected each `content` entry to contain a `type` string");if(!t.every((t=>"string"==typeof t.value)))throw new Error("Expected each `content` entry to contain a `value` string");this.content=t}}addContent(t){this._checkProperty("content",t,[this._createTypeCheck("object")])&&this.content.push(t)}addTextContent(t){this._checkProperty("text",t,[this._checkUndefined,this._createTypeCheck("string")])&&this.addContent({value:t,type:"text/plain"})}addHtmlContent(t){this._checkProperty("html",t,[this._checkUndefined,this._createTypeCheck("string")])&&this.addContent({value:t,type:"text/html"})}setAttachments(t){if(this._doArrayCheck("attachments",t)){if(!t.every((t=>"string"==typeof t.content)))throw new Error("Expected each attachment to contain a `content` string");if(!t.every((t=>"string"==typeof t.filename)))throw new Error("Expected each attachment to contain a `filename` string");if(!t.every((t=>!t.type||"string"==typeof t.type)))throw new Error("Expected the attachment's `type` field to be a string");if(!t.every((t=>!t.disposition||"string"==typeof t.disposition)))throw new Error("Expected the attachment's `disposition` field to be a string");this.attachments=t}}addAttachment(t){this._checkProperty("attachment",t,[this._checkUndefined,this._createTypeCheck("object")])&&this.attachments.push(t)}setCategories(t){"string"==typeof t&&(t=[t]),this._checkProperty("categories",t,[this._checkUndefined,(t,e)=>{if(!Array.isArray(e)||!e.every((t=>"string"==typeof t)))throw new Error("Array of strings expected for `"+t+"`")}])&&(this.categories=t)}addCategory(t){this._checkProperty("category",t,[this._createTypeCheck("string")])&&this.categories.push(t)}setHeaders(t){this._setProperty("headers",t,"object")}addHeader(t,e){this._checkProperty("key",t,[this._createTypeCheck("string")])&&this._checkProperty("value",e,[this._createTypeCheck("string")])&&(this.headers[t]=e)}setSections(t){this._setProperty("sections",t,"object")}setCustomArgs(t){this._setProperty("customArgs",t,"object")}setTrackingSettings(t){void 0!==t&&(d(t),this.trackingSettings=t)}setMailSettings(t){void 0!==t&&(u(t),this.mailSettings=t)}setHideWarnings(t){if(void 0!==t){if("boolean"!=typeof t)throw new Error("Boolean expected for `hideWarnings`");this.hideWarnings=t}}toJSON(){const{from:t,replyTo:e,sendAt:r,subject:n,content:o,templateId:i,personalizations:a,attachments:l,ipPoolName:u,batchId:d,asm:f,sections:h,headers:p,categories:m,customArgs:g,mailSettings:y,trackingSettings:b,replyToList:v}=this,w={from:t,subject:n,personalizations:c(a)};return Array.isArray(l)&&l.length>0&&(w.attachments=c(l)),Array.isArray(m)&&m.length>0&&(w.categories=m.filter((t=>""!==t))),Array.isArray(o)&&o.length>0&&(w.content=c(o)),Object.keys(p).length>0&&(w.headers=p),Object.keys(y).length>0&&(w.mailSettings=y),Object.keys(b).length>0&&(w.trackingSettings=b),Object.keys(g).length>0&&(w.customArgs=g),Object.keys(h).length>0&&(w.sections=h),Object.keys(f).length>0&&(w.asm=f),void 0!==e&&(w.replyTo=e),void 0!==r&&(w.sendAt=r),void 0!==d&&(w.batchId=d),void 0!==i&&(w.templateId=i),void 0!==u&&(w.ipPoolName=u),void 0!==v&&(w.replyToList=v),s(w,["substitutions","dynamicTemplateData","customArgs","headers","sections"])}static create(t){return Array.isArray(t)?t.filter((t=>!!t)).map((t=>this.create(t))):t instanceof f?t:new f(t)}_checkProperty(t,e,r){return!r.some((r=>r(t,e)))}_setProperty(t,e,r){let n=this._checkProperty(t,e,[this._checkUndefined,this._createTypeCheck(r)]);return n&&(this[t]=e),n}_checkUndefined(t,e){return void 0===e}_createTypeCheck(t){return(e,r)=>{if(typeof r!==t)throw new Error(t+" expected for `"+e+"`")}}_createCheckThatThrows(t,e){return(r,n)=>{if(!t(n))throw new Error(e)}}_setArrayProperty(t,e){this._doArrayCheck(t,e)&&(this[t]=e)}_doArrayCheck(t,e){return this._checkProperty(t,e,[this._checkUndefined,this._createCheckThatThrows(Array.isArray,"Array expected for`"+t+"`")])}setReplyToList(t){if(this._doArrayCheck("replyToList",t)&&t.length){if(!t.every((t=>t&&"string"==typeof t.email)))throw new Error("Expected each replyTo to contain an `email` string");this.replyToList=t}}}t.exports=f},400:(t,e,r)=>{"use strict";const n=r(241),o=r(304),i=r(938),s=r(727),a=r(744),c=r(282);t.exports=class{constructor(t){this.to=[],this.cc=[],this.bcc=[],this.headers={},this.customArgs={},this.substitutions={},this.substitutionWrappers=["{{","}}"],this.dynamicTemplateData={},t&&this.fromData(t)}fromData(t){if("object"!=typeof t)throw new Error("Expecting object for Mail data");t=s(t),t=o(t,["substitutions","dynamicTemplateData","customArgs","headers"]);const{to:e,from:r,cc:n,bcc:i,subject:a,headers:c,customArgs:l,sendAt:u,substitutions:d,substitutionWrappers:f,dynamicTemplateData:h}=t;this.setTo(e),this.setFrom(r),this.setCc(n),this.setBcc(i),this.setSubject(a),this.setHeaders(c),this.setSubstitutions(d),this.setSubstitutionWrappers(f),this.setCustomArgs(l),this.setDynamicTemplateData(h),this.setSendAt(u)}setSubject(t){if(void 0!==t){if("string"!=typeof t)throw new Error("String expected for `subject`");this.subject=t}}setSendAt(t){if(void 0!==t){if(!Number.isInteger(t))throw new Error("Integer expected for `sendAt`");this.sendAt=t}}setTo(t){void 0!==t&&(Array.isArray(t)||(t=[t]),this.to=n.create(t))}setFrom(t){void 0!==t&&(this.from=n.create(t))}addTo(t){void 0!==t&&this.to.push(n.create(t))}setCc(t){void 0!==t&&(Array.isArray(t)||(t=[t]),this.cc=n.create(t))}addCc(t){void 0!==t&&this.cc.push(n.create(t))}setBcc(t){void 0!==t&&(Array.isArray(t)||(t=[t]),this.bcc=n.create(t))}addBcc(t){void 0!==t&&this.bcc.push(n.create(t))}setHeaders(t){if(void 0!==t){if("object"!=typeof t||null===t)throw new Error("Object expected for `headers`");this.headers=t}}addHeader(t,e){if("string"!=typeof t)throw new Error("String expected for header key");if("string"!=typeof e)throw new Error("String expected for header value");this.headers[t]=e}setCustomArgs(t){if(void 0!==t){if("object"!=typeof t||null===t)throw new Error("Object expected for `customArgs`");this.customArgs=t}}addCustomArg(t,e){if("string"!=typeof t)throw new Error("String expected for custom arg key");if("string"!=typeof e)throw new Error("String expected for custom arg value");this.customArgs[t]=e}setSubstitutions(t){if(void 0!==t){if("object"!=typeof t)throw new Error("Object expected for `substitutions`");this.substitutions=t}}addSubstitution(t,e){if("string"!=typeof t)throw new Error("String expected for substitution key");if("string"!=typeof e&&"number"!=typeof e)throw new Error("String or Number expected for substitution value");this.substitutions[t]=e}reverseMergeSubstitutions(t){if(null!=t){if("object"!=typeof t)throw new Error("Object expected for `substitutions` in reverseMergeSubstitutions");this.substitutions=Object.assign({},t,this.substitutions)}}setSubstitutionWrappers(t){if(null!=t){if(!Array.isArray(t)||2!==t.length)throw new Error("Array expected with two elements for `substitutionWrappers`");this.substitutionWrappers=t}}deepMergeDynamicTemplateData(t){if(null!=t){if("object"!=typeof t)throw new Error("Object expected for `dynamicTemplateData` in deepMergeDynamicTemplateData");this.dynamicTemplateData=a(t,this.dynamicTemplateData)}}setDynamicTemplateData(t){if(void 0!==t){if("object"!=typeof t)throw new Error("Object expected for `dynamicTemplateData`");this.dynamicTemplateData=t}}toJSON(){const{to:t,from:e,cc:r,bcc:n,subject:o,headers:s,customArgs:a,sendAt:l,substitutions:u,substitutionWrappers:d,dynamicTemplateData:f}=this,h={to:t};if(Array.isArray(r)&&r.length>0&&(h.cc=r),Array.isArray(n)&&n.length>0&&(h.bcc=n),Object.keys(s).length>0&&(h.headers=s),u&&Object.keys(u).length>0){const[t,e]=d;h.substitutions=c(u,t,e)}return Object.keys(a).length>0&&(h.customArgs=a),f&&Object.keys(f).length>0&&(h.dynamicTemplateData=f),void 0!==o&&(h.subject=o),void 0!==l&&(h.sendAt=l),void 0!==e&&(h.from=e),i(h,["substitutions","dynamicTemplateData","customArgs","headers"])}}},598:t=>{"use strict";class e extends Error{constructor(t){super();const{headers:e,status:r,statusText:n,data:o}=t;this.code=r,this.message=n,this.response={headers:e,body:o},this.stack||Error.captureStackTrace(this,this.constructor);const i=new RegExp(process.cwd()+"/","gi");this.stack=this.stack.replace(i,"")}toString(){const{body:t}=this.response;let e=`${this.message} (${this.code})`;return t&&Array.isArray(t.errors)&&t.errors.forEach((t=>{const r=t.message,n=t.field,o=t.help;e+=`\n  ${r}\n    ${n}\n    ${o}`})),e}toJSON(){const{message:t,code:e,response:r}=this;return{message:t,code:e,response:r}}}t.exports=e},713:t=>{"use strict";t.exports=class{constructor(t,e,r){this.statusCode=t,this.body=e,this.headers=r}toString(){return"HTTP "+this.statusCode+" "+this.body}}},21:(t,e,r)=>{"use strict";const n=r(304),o=r(727),i=["day","week","month"],s=["us","ca"],a=["desc","asc"];t.exports=class{constructor(t){this.startDate=null,this.endDate=null,this.aggregatedBy=null,t&&this.fromData(t)}fromData(t){if("object"!=typeof t)throw new Error("Expecting object for Statistics data");t=o(t),t=n(t,["substitutions","customArgs"]);const{startDate:e,endDate:r,aggregatedBy:i}=t;this.setStartDate(e),this.setEndDate(r),this.setAggregatedBy(i)}setStartDate(t){if(void 0===t)throw new Error("Date expected for `startDate`");if("Invalid Date"===new Date(t)||isNaN(new Date(t)))throw new Error("Date expected for `startDate`");console.log(t),this.startDate=new Date(t).toISOString().slice(0,10)}setEndDate(t){if(void 0!==t){if("Invalid Date"===new Date(t)||isNaN(new Date(t)))throw new Error("Date expected for `endDate`");this.endDate=new Date(t).toISOString().slice(0,10)}else this.endDate=(new Date).toISOString().slice(0,10)}setAggregatedBy(t){if(void 0!==t){if("string"!=typeof t||!i.includes(t.toLowerCase()))throw new Error("Incorrect value for `aggregatedBy`");this.aggregatedBy=t}}getGlobal(){const{startDate:t,endDate:e,aggregatedBy:r}=this;return{startDate:t,endDate:e,aggregatedBy:r}}getAdvanced(t){const e=this.getGlobal();return void 0===t||"string"==typeof t&&s.includes(t.toLowerCase())&&(e.country=t),e}getAdvancedMailboxProviders(t){const e=this.getGlobal();if(void 0===t)return e;if(Array.isArray(t)&&t.some((t=>"string"!=typeof t)))throw new Error("Array of strings expected for `mailboxProviders`");return e.mailBoxProviders=t,e}getAdvancedBrowsers(t){const e=this.getGlobal();if(void 0===t)return e;if(Array.isArray(t)&&t.some((t=>"string"!=typeof t)))throw new Error("Array of strings expected for `browsers`");return e.browsers=t,e}getCategories(t){if(void 0===t)throw new Error("Array of strings expected for `categories`");if(!this._isValidArrayOfStrings(t))throw new Error("Array of strings expected for `categories`");const e=this.getGlobal();return e.categories=t,e}getSubuser(t){if(void 0===t)throw new Error("Array of strings expected for `subusers`");if(!this._isValidArrayOfStrings(t))throw new Error("Array of strings expected for `subusers`");const e=this.getGlobal();return e.subusers=t,e}getSubuserSum(t="delivered",e=a[0],r=5,n=0){if("string"!=typeof t)throw new Error("string expected for `sortByMetric`");if(!a.includes(e.toLowerCase()))throw new Error("desc or asc expected for `sortByDirection`");if("number"!=typeof r)throw new Error("number expected for `limit`");if("number"!=typeof n)throw new Error("number expected for `offset`");const o=this.getGlobal();return o.sortByMetric=t,o.sortByDirection=e,o.limit=r,o.offset=n,o}getSubuserMonthly(t="delivered",e=a[0],r=5,n=0){if("string"!=typeof t)throw new Error("string expected for `sortByMetric`");if(!a.includes(e.toLowerCase()))throw new Error("desc or asc expected for `sortByDirection`");if("number"!=typeof r)throw new Error("number expected for `limit`");if("number"!=typeof n)throw new Error("number expected for `offset`");const o=this.getGlobal();return o.sortByMetric=t,o.sortByDirection=e,o.limit=r,o.offset=n,o}_isValidArrayOfStrings(t){return!!Array.isArray(t)&&!(t.length<1||t.some((t=>"string"!=typeof t)))}}},49:t=>{t.exports={DYNAMIC_TEMPLATE_CHAR_WARNING:"\nContent with characters ', \" or & may need to be escaped with three brackets\n{{{ content }}}\nSee https://sendgrid.com/docs/for-developers/sending-email/using-handlebars/ for more information."}},995:t=>{"use strict";t.exports=function(t){return t.map((t=>"object"==typeof t&&null!==t&&"function"==typeof t.toJSON?t.toJSON():t))}},699:t=>{"use strict";t.exports=function t(e,r,n){if("object"!=typeof e||null===e)throw new Error("Non object passed to convertKeys: "+e);if(Array.isArray(e))return e;Array.isArray(n)||(n=[]);for(const o in e)if(e.hasOwnProperty(o)){const i=r(o);"object"==typeof e[o]&&null!==e[o]&&(n.includes(o)||n.includes(i)||(e[o]=t(e[o],r,n))),i!==o&&(e[i]=e[o],delete e[o])}return e}},727:t=>{"use strict";t.exports=function(t){return JSON.parse(JSON.stringify(t))}},309:(t,e,r)=>{"use strict";const n=r(995),o=r(699),i=r(727),s=r(930),a=r(588),c=r(304),l=r(938),u=r(282);t.exports={arrayToJSON:n,convertKeys:o,deepClone:i,mergeData:s,splitNameEmail:a,toCamelCase:c,toSnakeCase:l,wrapSubstitutions:u}},930:t=>{"use strict";t.exports=function(t,e){if("object"!=typeof t||null===t)throw new Error("Not an object provided for base");if("object"!=typeof e||null===e)throw new Error("Not an object provided for data");const r=Object.assign({},t);for(const t in e)e.hasOwnProperty(t)&&(e[t]&&Array.isArray(e[t])?r[t]=e[t]:e[t]&&"object"==typeof e[t]?r[t]=Object.assign({},e[t]):e[t]&&(r[t]=e[t]));return r}},588:t=>{"use strict";t.exports=function(t){if(-1===t.indexOf("<"))return["",t];let[e,r]=t.split("<");return e=e.trim(),r=r.replace(">","").trim(),[e,r]}},582:t=>{"use strict";t.exports=function(t){if("string"!=typeof t)throw new Error("String expected for conversion to snake case");return t.trim().replace(/_+|\-+/g," ").replace(/(?:^\w|[A-Z]|\b\w|\s+)/g,(function(t,e){return 0===Number(t)?"":0===e?t.toLowerCase():t.toUpperCase()}))}},56:t=>{"use strict";t.exports=function(t){if("string"!=typeof t)throw new Error("String expected for conversion to snake case");return t.trim().replace(/(\s*\-*\b\w|[A-Z])/g,(function(t){return("_"===(t=t.trim().toLowerCase().replace("-",""))[0]?"":"_")+t})).slice(1)}},304:(t,e,r)=>{"use strict";const n=r(699),o=r(582);t.exports=function(t,e){return n(t,o,e)}},938:(t,e,r)=>{"use strict";const n=r(699),o=r(56);t.exports=function(t,e){return n(t,o,e)}},357:t=>{"use strict";const e=(t,e,r,n)=>{if(void 0!==t&&void 0!==t[r]&&typeof t[r]!==n)throw new Error(`${n} expected for \`${e}.${r}\``)};t.exports={validateMailSettings(t){if("object"!=typeof t)throw new Error("Object expected for `mailSettings`");const{bcc:r,bypassListManagement:n,bypassSpamManagement:o,bypassBounceManagement:i,bypassUnsubscribeManagement:s,footer:a,sandboxMode:c,spamCheck:l}=t;e(r,"bcc","enable","boolean"),e(r,"bcc","email","string"),e(n,"bypassListManagement","enable","boolean"),e(o,"bypassSpamManagement","enable","boolean"),e(i,"bypassBounceManagement","enable","boolean"),e(s,"bypassUnsubscribeManagement","enable","boolean"),e(a,"footer","enable","boolean"),e(a,"footer","text","string"),e(a,"footer","html","string"),e(c,"sandboxMode","enable","boolean"),e(l,"spamCheck","enable","boolean"),e(l,"spamCheck","threshold","number"),e(l,"spamCheck","postToUrl","string")},validateTrackingSettings(t){if("object"!=typeof t)throw new Error("Object expected for `trackingSettings`");const{clickTracking:r,openTracking:n,subscriptionTracking:o,ganalytics:i}=t;e(r,"clickTracking","enable","boolean"),e(r,"clickTracking","enableText","boolean"),e(n,"openTracking","enable","boolean"),e(n,"openTracking","substitutionTag","string"),e(o,"subscriptionTracking","enable","boolean"),e(o,"subscriptionTracking","text","string"),e(o,"subscriptionTracking","html","string"),e(o,"subscriptionTracking","substitutionTag","string"),e(i,"ganalytics","enable","boolean"),e(i,"ganalytics","utm_source","string"),e(i,"ganalytics","utm_medium","string"),e(i,"ganalytics","utm_term","string"),e(i,"ganalytics","utm_content","string"),e(i,"ganalytics","utm_campaign","string")}}},282:t=>{"use strict";t.exports=function t(e,r="{{",n="}}"){if(Array.isArray(e))return e.map((e=>t(e,r,n)));const o={};for(const t in e)e.hasOwnProperty(t)&&(o[r+t+n]=String(e[t]));return o}},791:(t,e,r)=>{"use strict";const n=r(424),o=r(309);t.exports={classes:n,helpers:o}},837:(t,e,r)=>{"use strict";const n=r(893),o=r(850);t.exports=n,t.exports.MailService=o},850:(t,e,r)=>{"use strict";const{Client:n}=r(333),{classes:{Mail:o}}=r(791);t.exports=class{constructor(){this.setClient(new n),this.setSubstitutionWrappers("{{","}}"),this.secretRules=[]}setClient(t){return this.client=t,this}setApiKey(t){return this.client.setApiKey(t),this}setTwilioEmailAuth(t,e){this.client.setTwilioEmailAuth(t,e)}setTimeout(t){void 0!==t&&this.client.setDefaultRequest("timeout",t)}setSubstitutionWrappers(t,e){if(void 0===t||void 0===e)throw new Error("Must provide both left and right side wrappers");return Array.isArray(this.substitutionWrappers)||(this.substitutionWrappers=[]),this.substitutionWrappers[0]=t,this.substitutionWrappers[1]=e,this}setSecretRules(t){t instanceof Array||(t=[t]);const e=t.map((function(t){const e=typeof t;if("string"===e)return{pattern:new RegExp(t)};if("object"===e){t instanceof RegExp?t={pattern:t}:t.hasOwnProperty("pattern")&&"string"==typeof t.pattern&&(t.pattern=new RegExp(t.pattern));try{return t.pattern.test(""),t}catch(t){}}}));this.secretRules=e.filter((function(t){return t}))}filterSecrets(t){if("object"==typeof t&&!t.hasOwnProperty("content"))return;const e=this;t.content.forEach((function(t){e.secretRules.forEach((function(e){if(e.hasOwnProperty("pattern")&&!e.pattern.test(t.value))return;let r=`The pattern '${e.pattern}'`;throw e.name&&(r+=`identified by '${e.name}'`),r+=" was found in the Mail content!",new Error(r)}))}))}send(t,e=!1,r){if("function"==typeof e&&(r=e,e=!1),Array.isArray(t)){const n=Promise.all(t.map((t=>this.send(t,e))));return r&&n.then((t=>r(null,t))).catch((t=>r(t,null))),n}try{void 0===t.isMultiple&&(t.isMultiple=e),void 0===t.substitutionWrappers&&(t.substitutionWrappers=this.substitutionWrappers);const n=o.create(t),i=n.toJSON();this.filterSecrets(i);const s={method:"POST",url:"/v3/mail/send",headers:n.headers,body:i};return this.client.request(s,r)}catch(t){return r&&r(t,null),Promise.reject(t)}}sendMultiple(t,e){return this.send(t,!0,e)}}},893:(t,e,r)=>{"use strict";const n=r(850);t.exports=new n},744:t=>{"use strict";var e=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===r}(t)}(t)},r="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(t,e){return!1!==e.clone&&e.isMergeableObject(t)?a((r=t,Array.isArray(r)?[]:{}),t,e):t;var r}function o(t,e,r){return t.concat(e).map((function(t){return n(t,r)}))}function i(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return Object.propertyIsEnumerable.call(t,e)})):[]}(t))}function s(t,e){try{return e in t}catch(t){return!1}}function a(t,r,c){(c=c||{}).arrayMerge=c.arrayMerge||o,c.isMergeableObject=c.isMergeableObject||e,c.cloneUnlessOtherwiseSpecified=n;var l=Array.isArray(r);return l===Array.isArray(t)?l?c.arrayMerge(t,r,c):function(t,e,r){var o={};return r.isMergeableObject(t)&&i(t).forEach((function(e){o[e]=n(t[e],r)})),i(e).forEach((function(i){(function(t,e){return s(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,i)||(s(t,i)&&r.isMergeableObject(e[i])?o[i]=function(t,e){if(!e.customMerge)return a;var r=e.customMerge(t);return"function"==typeof r?r:a}(i,r)(t[i],e[i],r):o[i]=n(e[i],r))})),o}(t,r,c):n(r,c)}a.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,r){return a(t,r,e)}),{})};var c=a;t.exports=c},975:t=>{"use strict";function e(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function r(t,e){for(var r,n="",o=0,i=-1,s=0,a=0;a<=t.length;++a){if(a<t.length)r=t.charCodeAt(a);else{if(47===r)break;r=47}if(47===r){if(i===a-1||1===s);else if(i!==a-1&&2===s){if(n.length<2||2!==o||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var c=n.lastIndexOf("/");if(c!==n.length-1){-1===c?(n="",o=0):o=(n=n.slice(0,c)).length-1-n.lastIndexOf("/"),i=a,s=0;continue}}else if(2===n.length||1===n.length){n="",o=0,i=a,s=0;continue}e&&(n.length>0?n+="/..":n="..",o=2)}else n.length>0?n+="/"+t.slice(i+1,a):n=t.slice(i+1,a),o=a-i-1;i=a,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var s;i>=0?s=arguments[i]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+"/"+n,o=47===s.charCodeAt(0))}return n=r(n,!o),o?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(t){if(e(t),0===t.length)return".";var n=47===t.charCodeAt(0),o=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t="."),t.length>0&&o&&(t+="/"),n?"/"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,r=0;r<arguments.length;++r){var o=arguments[r];e(o),o.length>0&&(void 0===t?t=o:t+="/"+o)}return void 0===t?".":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return"";if((t=n.resolve(t))===(r=n.resolve(r)))return"";for(var o=1;o<t.length&&47===t.charCodeAt(o);++o);for(var i=t.length,s=i-o,a=1;a<r.length&&47===r.charCodeAt(a);++a);for(var c=r.length-a,l=s<c?s:c,u=-1,d=0;d<=l;++d){if(d===l){if(c>l){if(47===r.charCodeAt(a+d))return r.slice(a+d+1);if(0===d)return r.slice(a+d)}else s>l&&(47===t.charCodeAt(o+d)?u=d:0===d&&(u=0));break}var f=t.charCodeAt(o+d);if(f!==r.charCodeAt(a+d))break;47===f&&(u=d)}var h="";for(d=o+u+1;d<=i;++d)d!==i&&47!==t.charCodeAt(d)||(0===h.length?h+="..":h+="/..");return h.length>0?h+r.slice(a+u):(a+=u,47===r.charCodeAt(a)&&++a,r.slice(a))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return".";for(var r=t.charCodeAt(0),n=47===r,o=-1,i=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!i){o=s;break}}else i=!1;return-1===o?n?"/":".":n&&1===o?"//":t.slice(0,o)},basename:function(t,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');e(t);var n,o=0,i=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var a=r.length-1,c=-1;for(n=t.length-1;n>=0;--n){var l=t.charCodeAt(n);if(47===l){if(!s){o=n+1;break}}else-1===c&&(s=!1,c=n+1),a>=0&&(l===r.charCodeAt(a)?-1==--a&&(i=n):(a=-1,i=c))}return o===i?i=c:-1===i&&(i=t.length),t.slice(o,i)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){o=n+1;break}}else-1===i&&(s=!1,i=n+1);return-1===i?"":t.slice(o,i)},extname:function(t){e(t);for(var r=-1,n=0,o=-1,i=!0,s=0,a=t.length-1;a>=0;--a){var c=t.charCodeAt(a);if(47!==c)-1===o&&(i=!1,o=a+1),46===c?-1===r?r=a:1!==s&&(s=1):-1!==r&&(s=-1);else if(!i){n=a+1;break}}return-1===r||-1===o||0===s||1===s&&r===o-1&&r===n+1?"":t.slice(r,o)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||"")+(e.ext||"");return r?r===e.root?r+n:r+"/"+n:n}(0,t)},parse:function(t){e(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return r;var n,o=t.charCodeAt(0),i=47===o;i?(r.root="/",n=1):n=0;for(var s=-1,a=0,c=-1,l=!0,u=t.length-1,d=0;u>=n;--u)if(47!==(o=t.charCodeAt(u)))-1===c&&(l=!1,c=u+1),46===o?-1===s?s=u:1!==d&&(d=1):-1!==s&&(d=-1);else if(!l){a=u+1;break}return-1===s||-1===c||0===d||1===d&&s===c-1&&s===a+1?-1!==c&&(r.base=r.name=0===a&&i?t.slice(1,c):t.slice(a,c)):(0===a&&i?(r.name=t.slice(1,s),r.base=t.slice(1,c)):(r.name=t.slice(a,s),r.base=t.slice(a,c)),r.ext=t.slice(s,c)),a>0?r.dir=t.slice(0,a-1):i&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,t.exports=n},551:()=>{},425:(t,e,r)=>{"use strict";function n(t,e){return function(){return t.apply(e,arguments)}}const{toString:o}=Object.prototype,{getPrototypeOf:i}=Object,s=(a=Object.create(null),t=>{const e=o.call(t);return a[e]||(a[e]=e.slice(8,-1).toLowerCase())});var a;const c=t=>(t=t.toLowerCase(),e=>s(e)===t),l=t=>e=>typeof e===t,{isArray:u}=Array,d=l("undefined"),f=c("ArrayBuffer"),h=l("string"),p=l("function"),m=l("number"),g=t=>null!==t&&"object"==typeof t,y=t=>{if("object"!==s(t))return!1;const e=i(t);return!(null!==e&&e!==Object.prototype&&null!==Object.getPrototypeOf(e)||Symbol.toStringTag in t||Symbol.iterator in t)},b=c("Date"),v=c("File"),w=c("Blob"),E=c("FileList"),A=c("URLSearchParams");function S(t,e,{allOwnKeys:r=!1}={}){if(null==t)return;let n,o;if("object"!=typeof t&&(t=[t]),u(t))for(n=0,o=t.length;n<o;n++)e.call(null,t[n],n,t);else{const o=r?Object.getOwnPropertyNames(t):Object.keys(t),i=o.length;let s;for(n=0;n<i;n++)s=o[n],e.call(null,t[s],s,t)}}function x(t,e){e=e.toLowerCase();const r=Object.keys(t);let n,o=r.length;for(;o-- >0;)if(n=r[o],e===n.toLowerCase())return n;return null}const C="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:r.g,O=t=>!d(t)&&t!==C,T=(j="undefined"!=typeof Uint8Array&&i(Uint8Array),t=>j&&t instanceof j);var j;const k=c("HTMLFormElement"),L=(({hasOwnProperty:t})=>(e,r)=>t.call(e,r))(Object.prototype),D=c("RegExp"),_=(t,e)=>{const r=Object.getOwnPropertyDescriptors(t),n={};S(r,((r,o)=>{let i;!1!==(i=e(r,o,t))&&(n[o]=i||r)})),Object.defineProperties(t,n)},P="abcdefghijklmnopqrstuvwxyz",R="0123456789",N={DIGIT:R,ALPHA:P,ALPHA_DIGIT:P+P.toUpperCase()+R},B=c("AsyncFunction");var F={isArray:u,isArrayBuffer:f,isBuffer:function(t){return null!==t&&!d(t)&&null!==t.constructor&&!d(t.constructor)&&p(t.constructor.isBuffer)&&t.constructor.isBuffer(t)},isFormData:t=>{let e;return t&&("function"==typeof FormData&&t instanceof FormData||p(t.append)&&("formdata"===(e=s(t))||"object"===e&&p(t.toString)&&"[object FormData]"===t.toString()))},isArrayBufferView:function(t){let e;return e="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&f(t.buffer),e},isString:h,isNumber:m,isBoolean:t=>!0===t||!1===t,isObject:g,isPlainObject:y,isUndefined:d,isDate:b,isFile:v,isBlob:w,isRegExp:D,isFunction:p,isStream:t=>g(t)&&p(t.pipe),isURLSearchParams:A,isTypedArray:T,isFileList:E,forEach:S,merge:function t(){const{caseless:e}=O(this)&&this||{},r={},n=(n,o)=>{const i=e&&x(r,o)||o;y(r[i])&&y(n)?r[i]=t(r[i],n):y(n)?r[i]=t({},n):u(n)?r[i]=n.slice():r[i]=n};for(let t=0,e=arguments.length;t<e;t++)arguments[t]&&S(arguments[t],n);return r},extend:(t,e,r,{allOwnKeys:o}={})=>(S(e,((e,o)=>{r&&p(e)?t[o]=n(e,r):t[o]=e}),{allOwnKeys:o}),t),trim:t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:t=>(65279===t.charCodeAt(0)&&(t=t.slice(1)),t),inherits:(t,e,r,n)=>{t.prototype=Object.create(e.prototype,n),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),r&&Object.assign(t.prototype,r)},toFlatObject:(t,e,r,n)=>{let o,s,a;const c={};if(e=e||{},null==t)return e;do{for(o=Object.getOwnPropertyNames(t),s=o.length;s-- >0;)a=o[s],n&&!n(a,t,e)||c[a]||(e[a]=t[a],c[a]=!0);t=!1!==r&&i(t)}while(t&&(!r||r(t,e))&&t!==Object.prototype);return e},kindOf:s,kindOfTest:c,endsWith:(t,e,r)=>{t=String(t),(void 0===r||r>t.length)&&(r=t.length),r-=e.length;const n=t.indexOf(e,r);return-1!==n&&n===r},toArray:t=>{if(!t)return null;if(u(t))return t;let e=t.length;if(!m(e))return null;const r=new Array(e);for(;e-- >0;)r[e]=t[e];return r},forEachEntry:(t,e)=>{const r=(t&&t[Symbol.iterator]).call(t);let n;for(;(n=r.next())&&!n.done;){const r=n.value;e.call(t,r[0],r[1])}},matchAll:(t,e)=>{let r;const n=[];for(;null!==(r=t.exec(e));)n.push(r);return n},isHTMLForm:k,hasOwnProperty:L,hasOwnProp:L,reduceDescriptors:_,freezeMethods:t=>{_(t,((e,r)=>{if(p(t)&&-1!==["arguments","caller","callee"].indexOf(r))return!1;const n=t[r];p(n)&&(e.enumerable=!1,"writable"in e?e.writable=!1:e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")}))}))},toObjectSet:(t,e)=>{const r={},n=t=>{t.forEach((t=>{r[t]=!0}))};return u(t)?n(t):n(String(t).split(e)),r},toCamelCase:t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(t,e,r){return e.toUpperCase()+r})),noop:()=>{},toFiniteNumber:(t,e)=>(t=+t,Number.isFinite(t)?t:e),findKey:x,global:C,isContextDefined:O,ALPHABET:N,generateString:(t=16,e=N.ALPHA_DIGIT)=>{let r="";const{length:n}=e;for(;t--;)r+=e[Math.random()*n|0];return r},isSpecCompliantForm:function(t){return!!(t&&p(t.append)&&"FormData"===t[Symbol.toStringTag]&&t[Symbol.iterator])},toJSONObject:t=>{const e=new Array(10),r=(t,n)=>{if(g(t)){if(e.indexOf(t)>=0)return;if(!("toJSON"in t)){e[n]=t;const o=u(t)?[]:{};return S(t,((t,e)=>{const i=r(t,n+1);!d(i)&&(o[e]=i)})),e[n]=void 0,o}}return t};return r(t,0)},isAsyncFn:B,isThenable:t=>t&&(g(t)||p(t))&&p(t.then)&&p(t.catch)};function I(t,e,r,n,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=t,this.name="AxiosError",e&&(this.code=e),r&&(this.config=r),n&&(this.request=n),o&&(this.response=o)}F.inherits(I,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:F.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const U=I.prototype,q={};function M(t){return F.isPlainObject(t)||F.isArray(t)}function z(t){return F.endsWith(t,"[]")?t.slice(0,-2):t}function W(t,e,r){return t?t.concat(e).map((function(t,e){return t=z(t),!r&&e?"["+t+"]":t})).join(r?".":""):e}["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((t=>{q[t]={value:t}})),Object.defineProperties(I,q),Object.defineProperty(U,"isAxiosError",{value:!0}),I.from=(t,e,r,n,o,i)=>{const s=Object.create(U);return F.toFlatObject(t,s,(function(t){return t!==Error.prototype}),(t=>"isAxiosError"!==t)),I.call(s,t.message,e,r,n,o),s.cause=t,s.name=t.name,i&&Object.assign(s,i),s};const H=F.toFlatObject(F,{},null,(function(t){return/^is[A-Z]/.test(t)}));function J(t,e,r){if(!F.isObject(t))throw new TypeError("target must be an object");e=e||new FormData;const n=(r=F.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(t,e){return!F.isUndefined(e[t])}))).metaTokens,o=r.visitor||l,i=r.dots,s=r.indexes,a=(r.Blob||"undefined"!=typeof Blob&&Blob)&&F.isSpecCompliantForm(e);if(!F.isFunction(o))throw new TypeError("visitor must be a function");function c(t){if(null===t)return"";if(F.isDate(t))return t.toISOString();if(!a&&F.isBlob(t))throw new I("Blob is not supported. Use a Buffer instead.");return F.isArrayBuffer(t)||F.isTypedArray(t)?a&&"function"==typeof Blob?new Blob([t]):Buffer.from(t):t}function l(t,r,o){let a=t;if(t&&!o&&"object"==typeof t)if(F.endsWith(r,"{}"))r=n?r:r.slice(0,-2),t=JSON.stringify(t);else if(F.isArray(t)&&function(t){return F.isArray(t)&&!t.some(M)}(t)||(F.isFileList(t)||F.endsWith(r,"[]"))&&(a=F.toArray(t)))return r=z(r),a.forEach((function(t,n){!F.isUndefined(t)&&null!==t&&e.append(!0===s?W([r],n,i):null===s?r:r+"[]",c(t))})),!1;return!!M(t)||(e.append(W(o,r,i),c(t)),!1)}const u=[],d=Object.assign(H,{defaultVisitor:l,convertValue:c,isVisitable:M});if(!F.isObject(t))throw new TypeError("data must be an object");return function t(r,n){if(!F.isUndefined(r)){if(-1!==u.indexOf(r))throw Error("Circular reference detected in "+n.join("."));u.push(r),F.forEach(r,(function(r,i){!0===(!(F.isUndefined(r)||null===r)&&o.call(e,r,F.isString(i)?i.trim():i,n,d))&&t(r,n?n.concat(i):[i])})),u.pop()}}(t),e}function G(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,(function(t){return e[t]}))}function $(t,e){this._pairs=[],t&&J(t,this,e)}const K=$.prototype;function V(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Y(t,e,r){if(!e)return t;const n=r&&r.encode||V,o=r&&r.serialize;let i;if(i=o?o(e,r):F.isURLSearchParams(e)?e.toString():new $(e,r).toString(n),i){const e=t.indexOf("#");-1!==e&&(t=t.slice(0,e)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}K.append=function(t,e){this._pairs.push([t,e])},K.toString=function(t){const e=t?function(e){return t.call(this,e,G)}:G;return this._pairs.map((function(t){return e(t[0])+"="+e(t[1])}),"").join("&")};var Z=class{constructor(){this.handlers=[]}use(t,e,r){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){F.forEach(this.handlers,(function(e){null!==e&&t(e)}))}},X={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Q={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:$,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]};const tt="undefined"!=typeof window&&"undefined"!=typeof document,et=(rt="undefined"!=typeof navigator&&navigator.product,tt&&["ReactNative","NativeScript","NS"].indexOf(rt)<0);var rt;const nt="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts;var ot={...Object.freeze({__proto__:null,hasBrowserEnv:tt,hasStandardBrowserWebWorkerEnv:nt,hasStandardBrowserEnv:et}),...Q};function it(t){function e(t,r,n,o){let i=t[o++];if("__proto__"===i)return!0;const s=Number.isFinite(+i),a=o>=t.length;return i=!i&&F.isArray(n)?n.length:i,a?(F.hasOwnProp(n,i)?n[i]=[n[i],r]:n[i]=r,!s):(n[i]&&F.isObject(n[i])||(n[i]=[]),e(t,r,n[i],o)&&F.isArray(n[i])&&(n[i]=function(t){const e={},r=Object.keys(t);let n;const o=r.length;let i;for(n=0;n<o;n++)i=r[n],e[i]=t[i];return e}(n[i])),!s)}if(F.isFormData(t)&&F.isFunction(t.entries)){const r={};return F.forEachEntry(t,((t,n)=>{e(function(t){return F.matchAll(/\w+|\[(\w*)]/g,t).map((t=>"[]"===t[0]?"":t[1]||t[0]))}(t),n,r,0)})),r}return null}const st={transitional:X,adapter:["xhr","http"],transformRequest:[function(t,e){const r=e.getContentType()||"",n=r.indexOf("application/json")>-1,o=F.isObject(t);if(o&&F.isHTMLForm(t)&&(t=new FormData(t)),F.isFormData(t))return n?JSON.stringify(it(t)):t;if(F.isArrayBuffer(t)||F.isBuffer(t)||F.isStream(t)||F.isFile(t)||F.isBlob(t))return t;if(F.isArrayBufferView(t))return t.buffer;if(F.isURLSearchParams(t))return e.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let i;if(o){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(t,e){return J(t,new ot.classes.URLSearchParams,Object.assign({visitor:function(t,e,r,n){return ot.isNode&&F.isBuffer(t)?(this.append(e,t.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},e))}(t,this.formSerializer).toString();if((i=F.isFileList(t))||r.indexOf("multipart/form-data")>-1){const e=this.env&&this.env.FormData;return J(i?{"files[]":t}:t,e&&new e,this.formSerializer)}}return o||n?(e.setContentType("application/json",!1),function(t,e,r){if(F.isString(t))try{return(0,JSON.parse)(t),F.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){const e=this.transitional||st.transitional,r=e&&e.forcedJSONParsing,n="json"===this.responseType;if(t&&F.isString(t)&&(r&&!this.responseType||n)){const r=!(e&&e.silentJSONParsing)&&n;try{return JSON.parse(t)}catch(t){if(r){if("SyntaxError"===t.name)throw I.from(t,I.ERR_BAD_RESPONSE,this,null,this.response);throw t}}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ot.classes.FormData,Blob:ot.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};F.forEach(["delete","get","head","post","put","patch"],(t=>{st.headers[t]={}}));var at=st;const ct=F.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),lt=Symbol("internals");function ut(t){return t&&String(t).trim().toLowerCase()}function dt(t){return!1===t||null==t?t:F.isArray(t)?t.map(dt):String(t)}function ft(t,e,r,n,o){return F.isFunction(n)?n.call(this,e,r):(o&&(e=r),F.isString(e)?F.isString(n)?-1!==e.indexOf(n):F.isRegExp(n)?n.test(e):void 0:void 0)}class ht{constructor(t){t&&this.set(t)}set(t,e,r){const n=this;function o(t,e,r){const o=ut(e);if(!o)throw new Error("header name must be a non-empty string");const i=F.findKey(n,o);(!i||void 0===n[i]||!0===r||void 0===r&&!1!==n[i])&&(n[i||e]=dt(t))}const i=(t,e)=>F.forEach(t,((t,r)=>o(t,r,e)));return F.isPlainObject(t)||t instanceof this.constructor?i(t,e):F.isString(t)&&(t=t.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim())?i((t=>{const e={};let r,n,o;return t&&t.split("\n").forEach((function(t){o=t.indexOf(":"),r=t.substring(0,o).trim().toLowerCase(),n=t.substring(o+1).trim(),!r||e[r]&&ct[r]||("set-cookie"===r?e[r]?e[r].push(n):e[r]=[n]:e[r]=e[r]?e[r]+", "+n:n)})),e})(t),e):null!=t&&o(e,t,r),this}get(t,e){if(t=ut(t)){const r=F.findKey(this,t);if(r){const t=this[r];if(!e)return t;if(!0===e)return function(t){const e=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=r.exec(t);)e[n[1]]=n[2];return e}(t);if(F.isFunction(e))return e.call(this,t,r);if(F.isRegExp(e))return e.exec(t);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,e){if(t=ut(t)){const r=F.findKey(this,t);return!(!r||void 0===this[r]||e&&!ft(0,this[r],r,e))}return!1}delete(t,e){const r=this;let n=!1;function o(t){if(t=ut(t)){const o=F.findKey(r,t);!o||e&&!ft(0,r[o],o,e)||(delete r[o],n=!0)}}return F.isArray(t)?t.forEach(o):o(t),n}clear(t){const e=Object.keys(this);let r=e.length,n=!1;for(;r--;){const o=e[r];t&&!ft(0,this[o],o,t,!0)||(delete this[o],n=!0)}return n}normalize(t){const e=this,r={};return F.forEach(this,((n,o)=>{const i=F.findKey(r,o);if(i)return e[i]=dt(n),void delete e[o];const s=t?function(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((t,e,r)=>e.toUpperCase()+r))}(o):String(o).trim();s!==o&&delete e[o],e[s]=dt(n),r[s]=!0})),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const e=Object.create(null);return F.forEach(this,((r,n)=>{null!=r&&!1!==r&&(e[n]=t&&F.isArray(r)?r.join(", "):r)})),e}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([t,e])=>t+": "+e)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...e){const r=new this(t);return e.forEach((t=>r.set(t))),r}static accessor(t){const e=(this[lt]=this[lt]={accessors:{}}).accessors,r=this.prototype;function n(t){const n=ut(t);e[n]||(function(t,e){const r=F.toCamelCase(" "+e);["get","set","has"].forEach((n=>{Object.defineProperty(t,n+r,{value:function(t,r,o){return this[n].call(this,e,t,r,o)},configurable:!0})}))}(r,t),e[n]=!0)}return F.isArray(t)?t.forEach(n):n(t),this}}ht.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),F.reduceDescriptors(ht.prototype,(({value:t},e)=>{let r=e[0].toUpperCase()+e.slice(1);return{get:()=>t,set(t){this[r]=t}}})),F.freezeMethods(ht);var pt=ht;function mt(t,e){const r=this||at,n=e||r,o=pt.from(n.headers);let i=n.data;return F.forEach(t,(function(t){i=t.call(r,i,o.normalize(),e?e.status:void 0)})),o.normalize(),i}function gt(t){return!(!t||!t.__CANCEL__)}function yt(t,e,r){I.call(this,null==t?"canceled":t,I.ERR_CANCELED,e,r),this.name="CanceledError"}F.inherits(yt,I,{__CANCEL__:!0});var bt=ot.hasStandardBrowserEnv?{write(t,e,r,n,o,i){const s=[t+"="+encodeURIComponent(e)];F.isNumber(r)&&s.push("expires="+new Date(r).toGMTString()),F.isString(n)&&s.push("path="+n),F.isString(o)&&s.push("domain="+o),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove(t){this.write(t,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function vt(t,e){return t&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)?function(t,e){return e?t.replace(/\/?\/$/,"")+"/"+e.replace(/^\/+/,""):t}(t,e):e}var wt=ot.hasStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");let r;function n(r){let n=r;return t&&(e.setAttribute("href",n),n=e.href),e.setAttribute("href",n),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return r=n(window.location.href),function(t){const e=F.isString(t)?n(t):t;return e.protocol===r.protocol&&e.host===r.host}}():function(){return!0};function Et(t,e){let r=0;const n=function(t,e){t=t||10;const r=new Array(t),n=new Array(t);let o,i=0,s=0;return e=void 0!==e?e:1e3,function(a){const c=Date.now(),l=n[s];o||(o=c),r[i]=a,n[i]=c;let u=s,d=0;for(;u!==i;)d+=r[u++],u%=t;if(i=(i+1)%t,i===s&&(s=(s+1)%t),c-o<e)return;const f=l&&c-l;return f?Math.round(1e3*d/f):void 0}}(50,250);return o=>{const i=o.loaded,s=o.lengthComputable?o.total:void 0,a=i-r,c=n(a);r=i;const l={loaded:i,total:s,progress:s?i/s:void 0,bytes:a,rate:c||void 0,estimated:c&&s&&i<=s?(s-i)/c:void 0,event:o};l[e?"download":"upload"]=!0,t(l)}}const At={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(t){return new Promise((function(e,r){let n=t.data;const o=pt.from(t.headers).normalize();let i,s,{responseType:a,withXSRFToken:c}=t;function l(){t.cancelToken&&t.cancelToken.unsubscribe(i),t.signal&&t.signal.removeEventListener("abort",i)}if(F.isFormData(n))if(ot.hasStandardBrowserEnv||ot.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(s=o.getContentType())){const[t,...e]=s?s.split(";").map((t=>t.trim())).filter(Boolean):[];o.setContentType([t||"multipart/form-data",...e].join("; "))}let u=new XMLHttpRequest;if(t.auth){const e=t.auth.username||"",r=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";o.set("Authorization","Basic "+btoa(e+":"+r))}const d=vt(t.baseURL,t.url);function f(){if(!u)return;const n=pt.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(t,e,r){const n=r.config.validateStatus;r.status&&n&&!n(r.status)?e(new I("Request failed with status code "+r.status,[I.ERR_BAD_REQUEST,I.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r)):t(r)}((function(t){e(t),l()}),(function(t){r(t),l()}),{data:a&&"text"!==a&&"json"!==a?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:n,config:t,request:u}),u=null}if(u.open(t.method.toUpperCase(),Y(d,t.params,t.paramsSerializer),!0),u.timeout=t.timeout,"onloadend"in u?u.onloadend=f:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(f)},u.onabort=function(){u&&(r(new I("Request aborted",I.ECONNABORTED,t,u)),u=null)},u.onerror=function(){r(new I("Network Error",I.ERR_NETWORK,t,u)),u=null},u.ontimeout=function(){let e=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded";const n=t.transitional||X;t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),r(new I(e,n.clarifyTimeoutError?I.ETIMEDOUT:I.ECONNABORTED,t,u)),u=null},ot.hasStandardBrowserEnv&&(c&&F.isFunction(c)&&(c=c(t)),c||!1!==c&&wt(d))){const e=t.xsrfHeaderName&&t.xsrfCookieName&&bt.read(t.xsrfCookieName);e&&o.set(t.xsrfHeaderName,e)}void 0===n&&o.setContentType(null),"setRequestHeader"in u&&F.forEach(o.toJSON(),(function(t,e){u.setRequestHeader(e,t)})),F.isUndefined(t.withCredentials)||(u.withCredentials=!!t.withCredentials),a&&"json"!==a&&(u.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&u.addEventListener("progress",Et(t.onDownloadProgress,!0)),"function"==typeof t.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",Et(t.onUploadProgress)),(t.cancelToken||t.signal)&&(i=e=>{u&&(r(!e||e.type?new yt(null,t,u):e),u.abort(),u=null)},t.cancelToken&&t.cancelToken.subscribe(i),t.signal&&(t.signal.aborted?i():t.signal.addEventListener("abort",i)));const h=function(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}(d);h&&-1===ot.protocols.indexOf(h)?r(new I("Unsupported protocol "+h+":",I.ERR_BAD_REQUEST,t)):u.send(n||null)}))}};F.forEach(At,((t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch(t){}Object.defineProperty(t,"adapterName",{value:e})}}));const St=t=>`- ${t}`,xt=t=>F.isFunction(t)||null===t||!1===t;var Ct=t=>{t=F.isArray(t)?t:[t];const{length:e}=t;let r,n;const o={};for(let i=0;i<e;i++){let e;if(r=t[i],n=r,!xt(r)&&(n=At[(e=String(r)).toLowerCase()],void 0===n))throw new I(`Unknown adapter '${e}'`);if(n)break;o[e||"#"+i]=n}if(!n){const t=Object.entries(o).map((([t,e])=>`adapter ${t} `+(!1===e?"is not supported by the environment":"is not available in the build")));throw new I("There is no suitable adapter to dispatch the request "+(e?t.length>1?"since :\n"+t.map(St).join("\n"):" "+St(t[0]):"as no adapter specified"),"ERR_NOT_SUPPORT")}return n};function Ot(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new yt(null,t)}function Tt(t){return Ot(t),t.headers=pt.from(t.headers),t.data=mt.call(t,t.transformRequest),-1!==["post","put","patch"].indexOf(t.method)&&t.headers.setContentType("application/x-www-form-urlencoded",!1),Ct(t.adapter||at.adapter)(t).then((function(e){return Ot(t),e.data=mt.call(t,t.transformResponse,e),e.headers=pt.from(e.headers),e}),(function(e){return gt(e)||(Ot(t),e&&e.response&&(e.response.data=mt.call(t,t.transformResponse,e.response),e.response.headers=pt.from(e.response.headers))),Promise.reject(e)}))}const jt=t=>t instanceof pt?{...t}:t;function kt(t,e){e=e||{};const r={};function n(t,e,r){return F.isPlainObject(t)&&F.isPlainObject(e)?F.merge.call({caseless:r},t,e):F.isPlainObject(e)?F.merge({},e):F.isArray(e)?e.slice():e}function o(t,e,r){return F.isUndefined(e)?F.isUndefined(t)?void 0:n(void 0,t,r):n(t,e,r)}function i(t,e){if(!F.isUndefined(e))return n(void 0,e)}function s(t,e){return F.isUndefined(e)?F.isUndefined(t)?void 0:n(void 0,t):n(void 0,e)}function a(r,o,i){return i in e?n(r,o):i in t?n(void 0,r):void 0}const c={url:i,method:i,data:i,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,withXSRFToken:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:a,headers:(t,e)=>o(jt(t),jt(e),!0)};return F.forEach(Object.keys(Object.assign({},t,e)),(function(n){const i=c[n]||o,s=i(t[n],e[n],n);F.isUndefined(s)&&i!==a||(r[n]=s)})),r}const Lt={};["object","boolean","number","function","string","symbol"].forEach(((t,e)=>{Lt[t]=function(r){return typeof r===t||"a"+(e<1?"n ":" ")+t}}));const Dt={};Lt.transitional=function(t,e,r){function n(t,e){return"[Axios v1.6.8] Transitional option '"+t+"'"+e+(r?". "+r:"")}return(r,o,i)=>{if(!1===t)throw new I(n(o," has been removed"+(e?" in "+e:"")),I.ERR_DEPRECATED);return e&&!Dt[o]&&(Dt[o]=!0,console.warn(n(o," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(r,o,i)}};var _t={assertOptions:function(t,e,r){if("object"!=typeof t)throw new I("options must be an object",I.ERR_BAD_OPTION_VALUE);const n=Object.keys(t);let o=n.length;for(;o-- >0;){const i=n[o],s=e[i];if(s){const e=t[i],r=void 0===e||s(e,i,t);if(!0!==r)throw new I("option "+i+" must be "+r,I.ERR_BAD_OPTION_VALUE)}else if(!0!==r)throw new I("Unknown option "+i,I.ERR_BAD_OPTION)}},validators:Lt};const Pt=_t.validators;class Rt{constructor(t){this.defaults=t,this.interceptors={request:new Z,response:new Z}}async request(t,e){try{return await this._request(t,e)}catch(t){if(t instanceof Error){let e;Error.captureStackTrace?Error.captureStackTrace(e={}):e=new Error;const r=e.stack?e.stack.replace(/^.+\n/,""):"";t.stack?r&&!String(t.stack).endsWith(r.replace(/^.+\n.+\n/,""))&&(t.stack+="\n"+r):t.stack=r}throw t}}_request(t,e){"string"==typeof t?(e=e||{}).url=t:e=t||{},e=kt(this.defaults,e);const{transitional:r,paramsSerializer:n,headers:o}=e;void 0!==r&&_t.assertOptions(r,{silentJSONParsing:Pt.transitional(Pt.boolean),forcedJSONParsing:Pt.transitional(Pt.boolean),clarifyTimeoutError:Pt.transitional(Pt.boolean)},!1),null!=n&&(F.isFunction(n)?e.paramsSerializer={serialize:n}:_t.assertOptions(n,{encode:Pt.function,serialize:Pt.function},!0)),e.method=(e.method||this.defaults.method||"get").toLowerCase();let i=o&&F.merge(o.common,o[e.method]);o&&F.forEach(["delete","get","head","post","put","patch","common"],(t=>{delete o[t]})),e.headers=pt.concat(i,o);const s=[];let a=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(a=a&&t.synchronous,s.unshift(t.fulfilled,t.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(t){c.push(t.fulfilled,t.rejected)}));let u,d=0;if(!a){const t=[Tt.bind(this),void 0];for(t.unshift.apply(t,s),t.push.apply(t,c),u=t.length,l=Promise.resolve(e);d<u;)l=l.then(t[d++],t[d++]);return l}u=s.length;let f=e;for(d=0;d<u;){const t=s[d++],e=s[d++];try{f=t(f)}catch(t){e.call(this,t);break}}try{l=Tt.call(this,f)}catch(t){return Promise.reject(t)}for(d=0,u=c.length;d<u;)l=l.then(c[d++],c[d++]);return l}getUri(t){return Y(vt((t=kt(this.defaults,t)).baseURL,t.url),t.params,t.paramsSerializer)}}F.forEach(["delete","get","head","options"],(function(t){Rt.prototype[t]=function(e,r){return this.request(kt(r||{},{method:t,url:e,data:(r||{}).data}))}})),F.forEach(["post","put","patch"],(function(t){function e(e){return function(r,n,o){return this.request(kt(o||{},{method:t,headers:e?{"Content-Type":"multipart/form-data"}:{},url:r,data:n}))}}Rt.prototype[t]=e(),Rt.prototype[t+"Form"]=e(!0)}));var Nt=Rt;class Bt{constructor(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");let e;this.promise=new Promise((function(t){e=t}));const r=this;this.promise.then((t=>{if(!r._listeners)return;let e=r._listeners.length;for(;e-- >0;)r._listeners[e](t);r._listeners=null})),this.promise.then=t=>{let e;const n=new Promise((t=>{r.subscribe(t),e=t})).then(t);return n.cancel=function(){r.unsubscribe(e)},n},t((function(t,n,o){r.reason||(r.reason=new yt(t,n,o),e(r.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}static source(){let t;return{token:new Bt((function(e){t=e})),cancel:t}}}var Ft=Bt;const It={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(It).forEach((([t,e])=>{It[e]=t}));var Ut=It;const qt=function t(e){const r=new Nt(e),o=n(Nt.prototype.request,r);return F.extend(o,Nt.prototype,r,{allOwnKeys:!0}),F.extend(o,r,null,{allOwnKeys:!0}),o.create=function(r){return t(kt(e,r))},o}(at);qt.Axios=Nt,qt.CanceledError=yt,qt.CancelToken=Ft,qt.isCancel=gt,qt.VERSION="1.6.8",qt.toFormData=J,qt.AxiosError=I,qt.Cancel=qt.CanceledError,qt.all=function(t){return Promise.all(t)},qt.spread=function(t){return function(e){return t.apply(null,e)}},qt.isAxiosError=function(t){return F.isObject(t)&&!0===t.isAxiosError},qt.mergeConfig=kt,qt.AxiosHeaders=pt,qt.formToJSON=t=>it(F.isHTMLForm(t)?new FormData(t):t),qt.getAdapter=Ct,qt.HttpStatusCode=Ut,qt.default=qt,t.exports=qt},498:t=>{"use strict";t.exports=JSON.parse('{"name":"@sendgrid/client","description":"Twilio SendGrid NodeJS API client","version":"8.1.3","author":"Twilio SendGrid <help@twilio.com> (sendgrid.com)","contributors":["Kyle Partridge <kyle.partridge@sendgrid.com>","David Tomberlin <david.tomberlin@sendgrid.com>","Swift <swift@sendgrid.com>","Brandon West <brandon.west@sendgrid.com>","Scott Motte <scott.motte@sendgrid.com>","Robert Acosta <robert.acosta@sendgrid.com>","Elmer Thomas <ethomas@twilio.com>","Adam Reis <adam@reis.nz>"],"license":"MIT","homepage":"https://sendgrid.com","repository":{"type":"git","url":"git://github.com/sendgrid/sendgrid-nodejs.git"},"publishConfig":{"access":"public"},"main":"index.js","engines":{"node":">=12.*"},"dependencies":{"@sendgrid/helpers":"^8.0.0","axios":"^1.6.8"},"devDependencies":{"chai":"4.2.0","nock":"^10.0.6"},"resolutions":{"chai":"4.2.0"},"tags":["http","rest","api","mail","sendgrid"],"gitHead":"07b4f7108b76c7e6617c74526aea15fbf7f9af3d"}')}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&(!t||!/^http(s?):/.test(t));)t=n[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),(()=>{"use strict";function t(t){t.preventDefault();var e=this.getAttribute("href"),r=document.querySelector(e);if(r){var n=document.querySelector("header").offsetHeight,o=r.getBoundingClientRect().top+window.scrollY-n;window.scrollTo({top:o,behavior:"smooth"})}}function e(t){var e=document.querySelector(t);if(e)return e;console.error("Element not found for selector: ".concat(t))}var n={animating:!1};function o(t){var r=e("nav");t?t&&(r.classList.remove("expanded"),n.animating=!1):(r.classList.add("expanded"),n.animating=!0)}function i(){var t=e(".nav-toggle-button"),r=t.classList.contains("active");if(r)t.classList.remove("active"),t.setAttribute("aria-label","Open Navigation Menu"),t.setAttribute("aria-expanded",!1),o(r);else{if(!0===n.animating)return;t.classList.add("active"),t.setAttribute("aria-label","Close Navigation Menu"),t.setAttribute("aria-expanded",!0),o(r)}t.addEventListener("click",i)}var s=1,a=!1;function c(t){l(s+=t)}function l(t){var e,r,n=document.querySelectorAll(".carousel-slide");document.querySelectorAll(".carousel-navigation-button"),function(t,e){e>t?s=1:e<1&&(s=t)}(n.length,t),(e=document.querySelector(".carousel-slide.active")).classList.add("deactivating"),a=!0,(r=e).setDeactivatedSlideToDisplayNoneRef=function(){!function(t){t.classList.remove("deactivating","active"),a=!1,t.removeEventListener("animationend",t.setDeactivatedSlideToDisplayNoneRef)}(r)},r.addEventListener("animationend",r.setDeactivatedSlideToDisplayNoneRef),document.querySelector(".carousel-navigation-button.active").classList.remove("active"),function(){var t=document.querySelectorAll(".carousel-slide"),e=document.querySelectorAll(".carousel-navigation-button");t[s-1].classList.add("active"),e[s-1].classList.add("active")}()}function u(t,e){"left"===e?(t.style.setProperty("--fade-in","var(--left-fade-in-animation)"),t.style.setProperty("--fade-out","var(--left-fade-out-animation)")):"right"===e&&(t.style.setProperty("--fade-in","var(--right-fade-in-animation)"),t.style.setProperty("--fade-out","var(--right-fade-out-animation)"))}function d(){var t=document.documentElement;!function(t){var e=document.querySelector(".carousel-arrow.left-arrow"),r=document.querySelector(".carousel-arrow.right-arrow");e&&e.addEventListener("click",(function(){if(!a){var e=s;c(-1),u(t,"left"),e<=s&&u(t,"right")}})),r&&r.addEventListener("click",(function(){if(!a){var e=s;c(1),u(t,"right"),e>=s&&u(t,"left")}}))}(t),function(t){document.querySelectorAll(".carousel-navigation-button").forEach((function(e,r){e.addEventListener("click",(function(){if(!e.classList.contains("active")&&!a){var n=s;!function(t){l(s=t)}(r+1),n<s?u(t,"right"):n>s&&u(t,"left")}}))}))}(t)}var f=function(t){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:document).querySelector(t)},h=function(t){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:document).querySelectorAll(t)},p=function(t,e,r){return t.addEventListener(e,r)},m=function(t,e,r){return t.removeEventListener(e,r)},g=function(t,e,r){return t.classList[e](r)},y=function(t,e){return t.disabled=e};function b(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,s,a=[],c=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(a.push(n.value),a.length!==e);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(l)throw o}}return a}}(t,e)||function(t,e){if(t){if("string"==typeof t)return v(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?v(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function w(t){var e=t.target,r=E.submitButton(),n=E.characterCount(),o=e.value.trim().length,i=o>=99;n.textContent="".concat(o,"/").concat(99),i?(y(r,!1),g(n,"add","valid")):(y(r,!0),g(n,"remove","valid"))}var E={form:function(){return f("#start-the-process-form")},stepNumber:function(){return f("#step-number")},characterCount:function(){return f("#character-count")},submitButton:function(){return f("#submit-button")},previousButton:function(){return f("#previous-button")},nextButton:function(){return f("#next-button")},modal:function(){return f("#start-the-process-dialog")},closeButton:function(){return f("#dialog-close-button")},buttonContainer:function(){return f("#dialog-button-container")},fieldSet:function(t){return f('[data-field-set="'.concat(t,'"]'))},textArea:function(){return f("textarea")},nameField:function(){return f("#name")}},A=function(t,e){var r;g(E.fieldSet(t),"remove","active"),g(E.fieldSet(e),"add","active"),r=e,E.stepNumber().textContent="Step ".concat(r),B.setNewFieldSet(e)},S=function(t){var e=E.textArea(),r=E.characterCount();"enable"===t?(g(r,"add","active"),e.value.trim().length>=99&&(g(r,"add","valid"),y(E.submitButton(),!1)),p(e,"input",w)):"disable"===t&&(g(r,"remove","active"),g(r,"remove","valid"),y(E.submitButton(),!0),m(e,"input",w))};function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}function C(){C=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},s=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function l(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,r){return t[e]=r}}function u(t,e,r,n){var i=e&&e.prototype instanceof y?e:y,s=Object.create(i.prototype),a=new _(n||[]);return o(s,"_invoke",{value:j(t,r,a)}),s}function d(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var f="suspendedStart",h="suspendedYield",p="executing",m="completed",g={};function y(){}function b(){}function v(){}var w={};l(w,s,(function(){return this}));var E=Object.getPrototypeOf,A=E&&E(E(P([])));A&&A!==r&&n.call(A,s)&&(w=A);var S=v.prototype=y.prototype=Object.create(w);function O(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function T(t,e){function r(o,i,s,a){var c=d(t[o],t,i);if("throw"!==c.type){var l=c.arg,u=l.value;return u&&"object"==x(u)&&n.call(u,"__await")?e.resolve(u.__await).then((function(t){r("next",t,s,a)}),(function(t){r("throw",t,s,a)})):e.resolve(u).then((function(t){l.value=t,s(l)}),(function(t){return r("throw",t,s,a)}))}a(c.arg)}var i;o(this,"_invoke",{value:function(t,n){function o(){return new e((function(e,o){r(t,n,e,o)}))}return i=i?i.then(o,o):o()}})}function j(e,r,n){var o=f;return function(i,s){if(o===p)throw new Error("Generator is already running");if(o===m){if("throw"===i)throw s;return{value:t,done:!0}}for(n.method=i,n.arg=s;;){var a=n.delegate;if(a){var c=k(a,n);if(c){if(c===g)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=p;var l=d(e,r,n);if("normal"===l.type){if(o=n.done?m:h,l.arg===g)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=m,n.method="throw",n.arg=l.arg)}}}function k(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,k(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),g;var i=d(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,g;var s=i.arg;return s?s.done?(r[e.resultName]=s.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):s:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function L(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function D(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(L,this),this.reset(!0)}function P(e){if(e||""===e){var r=e[s];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}throw new TypeError(x(e)+" is not iterable")}return b.prototype=v,o(S,"constructor",{value:v,configurable:!0}),o(v,"constructor",{value:b,configurable:!0}),b.displayName=l(v,c,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,l(t,c,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},O(T.prototype),l(T.prototype,a,(function(){return this})),e.AsyncIterator=T,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var s=new T(u(t,r,n,o),i);return e.isGeneratorFunction(r)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},O(S),l(S,c,"Generator"),l(S,s,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},e.values=P,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(D),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],a=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var c=n.call(s,"catchLoc"),l=n.call(s,"finallyLoc");if(c&&l){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=t,s.arg=e,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),g},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),D(r),g}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;D(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}function O(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function T(t,e,r,n,o,i,s){try{var a=t[i](s),c=a.value}catch(t){return void r(t)}a.done?e(c):Promise.resolve(c).then(n,o)}function j(){var t;return t=C().mark((function t(e){var r,n;return C().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("/api/submit-form",{method:"POST",headers:{"Content-Type":"application/json"},body:e});case 3:if(!(r=t.sent).ok){t.next=12;break}return t.next=7,r.json();case 7:return n=t.sent,t.abrupt("return",{success:!0,data:n});case 12:return console.error("Server-side error - form submission failed"),result.message||r.statusText,t.abrupt("return",{success:!1,error:result.message});case 15:t.next=21;break;case 17:t.prev=17,t.t0=t.catch(0),console.error("Client-side error - form submission:",t.t0),t.t0.message;case 21:case"end":return t.stop()}}),t,null,[[0,17]])})),j=function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function s(t){T(i,n,o,s,a,"next",t)}function a(t){T(i,n,o,s,a,"throw",t)}s(void 0)}))},j.apply(this,arguments)}function k(t){var e=h("input, select, textarea",t);return Array.from(e).filter((function(t){return t.name})).map((function(t){var e="INPUT"===t.tagName||"TEXTAREA"===t.tagName?t.value.trim():t.value;return[t.name,e]}))}function L(t){this.value=this.value.replace(/[^\d+\-() ]/g,"")}function D(t){var e=document.querySelector('input[type="tel"]');if("add"===t)e.addEventListener("input",L);else{if("remove"!==t)throw new Error('togglePhoneInputSanitization accepts only "add" and "remove" as arguments.');e.removeEventListener("input",L)}}function _(t){var e=t.target,r=e.options[e.selectedIndex];!0!==r.disabled&&""!==r.value&&e.classList.add("valid")}var P=function(){var t={};return{updateFieldSetFormData:function(e,r){console.log("Updating fieldSet: ".concat(r)),t[r]=e},get:function(){return t},clear:function(){return t={}},print:function(){Object.entries(t).forEach((function(t){var e=b(t,2),r=e[0],n=e[1];console.log("Fieldset: ".concat(r)),n.forEach((function(t){var e=b(t,2),r=e[0],n=e[1];console.log("".concat(r,": ").concat(n))}))}))}}}();function R(t){if("BUTTON"===t.target.tagName){var e=function(t){var e,r;D(1===t?"add":"remove"),e=2===t?"add":"remove",r=h("select"),"add"===e?r.forEach((function(t){p(t,"change",_)})):"remove"===e&&r.forEach((function(t){m(t,"change",_)}))},r=B.getCurrentFieldSet(),n=E.fieldSet(r),o=t.target,i=E.previousButton(),s=E.nextButton(),a=E.submitButton();if(o===s)!function(t,e,r){var n=E.previousButton(),o=E.nextButton();if(i=!0,h("input, select, textarea",r).forEach((function(t){var e=function(){t.classList.add("is-invalid"),p(t.closest(".field-element-container"),"animationend",(function e(){g(t,"remove","is-invalid"),m(t.closest(".field-element-container"),"animationend",e)})),i=!1},r="INPUT"===t.tagName,n="SELECT"===t.tagName;if(r){var o=t.getAttribute("data-pattern")?new RegExp(t.getAttribute("data-pattern")):null,s=t.value.trim(),a=o&&t.required,c=o&&""!==s,l="number"===t.getAttribute("type");a||c?o.test(t.value.trim())||e():l&&(t.checkValidity()||e())}else n&&(t.value||e())})),i){var i,s=k(r);P.updateFieldSetFormData(s,B.getCurrentFieldSet()),A(t,B.incrementFieldSet()),1!==B.getCurrentFieldSet()&&y(n,!1),3===B.getCurrentFieldSet()&&(y(o,!0),e("enable"))}}(r,S,n),e(r+1);else if(o===i)!function(t,e){var r=E.previousButton(),n=E.nextButton();A(t,B.decrementFieldSet()),1===B.getCurrentFieldSet()&&y(r,!0),3!==B.getCurrentFieldSet()&&y(n,!1),3===t&&e("disable")}(r,S),e(r-1);else if(o===a){var c=function(t,e){t.preventDefault();var r=function(t,e){var r={},n=k(t);e.updateFieldSetFormData(n,B.getCurrentFieldSet());for(var o=e.get(),i=0,s=Object.entries(o);i<s.length;i++)s[i][1].forEach((function(t){var e,n,o=(n=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,s,a=[],c=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(a.push(n.value),a.length!==e);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(l)throw o}}return a}}(e,n)||function(t,e){if(t){if("string"==typeof t)return O(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?O(t,e):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],s=o[1];r[i]=s}));return r}(e,P),n=JSON.stringify(r);return console.log(n),n}(t,n);!function(t){j.apply(this,arguments)}(c)}D(1===r?"add":"remove")}}var N,B=(N=1,{getCurrentFieldSet:function(){return N},setNewFieldSet:function(t){return N=t},incrementFieldSet:function(){return++N},decrementFieldSet:function(){return--N}});function F(){var t=E.modal();t.classList.remove("closing"),t.removeEventListener("animationend",F),t.close(),function(){var t=B.getCurrentFieldSet();E.form().reset(),E.characterCount().textContent="0/99",1!==t&&(y(E.previousButton(),!0),y(E.nextButton(),!1),A(t,1),3===t&&y(E.submitButton(),!0)),h("select").forEach((function(t){return g(t,"remove","valid")})),U(),D("remove"),S("disable"),m(E.closeButton(),"click",I)}()}function I(){var t=E.modal();g(t,"add","closing"),p(t,"animationend",F)}function U(){var t=h("#dialog-heading .letter");t[0].classList.contains("animate-letter")?t.forEach((function(t){t.classList.remove("animate-letter")})):t.forEach((function(t,e){setTimeout((function(){t.classList.add("animate-letter")}),123*(e+1))}))}function q(){E.modal().showModal(),E.nameField().focus(),D("add"),U(),p(E.closeButton(),"click",I),p(E.buttonContainer(),"click",R)}function M(t){t.forEach((function(t){t.isIntersecting?t.target.classList.add("intersecting"):t.target.classList.remove("intersecting")}))}var z=new IntersectionObserver(M,{threshold:.45}),W=new IntersectionObserver(M,{threshold:.45}),H=new IntersectionObserver(M,{threshold:.5});function J(){document.querySelector(".nav-toggle-button").click()}function G(){var t=document.documentElement.offsetWidth,e=document.querySelector(".nav-toggle-button"),r=document.querySelectorAll(".nav-link");e&&(t>1024?("true"===e.ariaExpanded&&e.click(),e.removeEventListener("click",i),r.forEach((function(t){return t.removeEventListener("click",J)}))):(e.addEventListener("click",i),r.forEach((function(t){return t.addEventListener("click",J)}))))}function $(t){this.classList.remove("highlight"),this.removeEventListener("animationend",$)}function K(){var t=document.getElementById("start-the-process-button");t.classList.add("highlight"),t.addEventListener("animationend",$)}const V=r.p+"a03f02b512a3b5f04437.webp",Y=JSON.parse('[{"textContent":"home","href":"#call-to-action"},{"textContent":"who are we?","href":"#who-are-we"},{"textContent":"how does it work?","href":"#how-does-it-work"},{"textContent":"start the process","href":"#start-the-process"}]');function Z(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function X(t,e,r,n,o,i){if("string"!=typeof e||"string"!=typeof t||"string"!=typeof n||"string"!=typeof r&&!Array.isArray(r)||"string"!=typeof o)throw new Error("Invalid input type. Please provide valid input types.");var s=document.createElement("img");if(s.setAttribute("id",e),s.src=t,s.alt=n,r&&("string"==typeof r?s.classList.add(r):Array.isArray(r)&&r.forEach((function(t){return s.classList.add(t)}))),s.setAttribute("aria-label",o),!i)throw new Error("Please add a size array for the image.");var a,c,l=(c=2,function(t){if(Array.isArray(t))return t}(a=i)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,s,a=[],c=!0,l=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(n=i.call(r)).done)&&(a.push(n.value),a.length!==e);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=r.return&&(s=r.return(),Object(s)!==s))return}finally{if(l)throw o}}return a}}(a,c)||function(t,e){if(t){if("string"==typeof t)return Z(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Z(t,e):void 0}}(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=l[0],d=l[1];return s.setAttribute("height",u),s.setAttribute("width",d),s}function Q(t,e){for(var r in e)t.setAttribute(r,e[r])}function tt(t){var e=document.createElement("figure");e.classList.add("carousel");var r=function(t){var e=document.createElement("button");e.classList.add("arrow","right-arrow","carousel-arrow"),Q(e,{type:"button","aria-label":"Next"});var r=function(t){if(!t||!t.length)throw new Error("No images provided for carousel.");var e=document.createElement("div");return e.classList.add("carousel-slide-container"),t.forEach((function(r,n){var o=document.createElement("figcaption");o.classList.add("carousel-image-caption"),o.textContent=r.alt;var i=document.createElement("img");i.classList.add("carousel-image","non-interactive"),Q(i,{src:r.src,alt:r.alt});var s=document.createElement("span");s.classList.add("carousel-image-index"),s.textContent="".concat(n+1,"/").concat(t.length);var a=document.createElement("figure");a.classList.add("carousel-image-container"),a.append(s,i,o);var c=document.createElement("div");c.classList.add("carousel-slide"),0===n&&c.classList.add("active"),c.setAttribute("data-index",n+1),c.append(a),e.append(c)})),e}(t),n=document.createElement("button");n.classList.add("arrow","left-arrow","carousel-arrow"),Q(n,{type:"button","aria-label":"Previous"});var o=document.createElement("div");return o.classList.add("carousel-container"),o.append(n,r,e),o}(t),n=function(t){if(!t.length)throw new Error("No images provided for carousel.");var e=document.createElement("div");e.classList.add("carousel-navigation-button-container"),t.forEach((function(t,r){var n=document.createElement("button");n.classList.add("carousel-navigation-button"),0===r&&n.classList.add("active"),Q(n,{type:"button","aria-label":"Go to slide ".concat(r+1),"data-index":r+1}),e.append(n)}));var r=document.createElement("div");return r.classList.add("carousel-navigation-container"),r.appendChild(e),r}(t);return e.append(r,n),e}const et=JSON.parse('[{"name":"Time Capsule NY","link":"http://www.timecapsuleny.io","logo":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/logos_grayscale45/tcny.svg"},{"name":"American PoolPlayers Association","link":"https://poolplayers.com/","logo":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/logos_grayscale45/apa.svg"}]'),rt=JSON.parse('[{"src":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/carousel_images/carousel-image-1.webp","alt":"Carousel image 1"},{"src":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/carousel_images/carousel-image-2.webp","alt":"Carousel image 2"},{"src":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/carousel_images/carousel-image-3.webp","alt":"Carousel image 3"},{"src":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/carousel_images/carousel-image-4.webp","alt":"Carousel image 4"}]'),nt=JSON.parse('[{"title":"Start the Process","textContent":["Share details about your collective and design preferences below.","Our team will promptly contact you to discuss your tailored needs."]},{"title":"Design Collaboration","textContent":["Work closely with our designers to create your product.","Upon final approval, you\'ll receive a personalized quote."]},{"title":"Production & Delivery","textContent":["We produce and emblazon your garments with the chosen designs.","Finally, your order is meticulously prepared and shipped directly to you."]}]'),ot=JSON.parse('[{"fieldSet":1,"id":"name","label":"Enter your name:","pattern":"^[a-zA-Z]+(([\',. -][a-zA-Z ])?[a-zA-Z]*)*$","placeholder":"John Doe","required":true,"type":"text"},{"fieldSet":1,"id":"email","label":"Enter your email address:","pattern":"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$","placeholder":"example@email.com","required":true,"type":"email"},{"fieldSet":1,"id":"phone","label":"Enter your phone number:","pattern":"^\\\\+?[0-9]{1,3}?[-. ]?([0-9]{2,4}?[-. ]?){1,3}[0-9]{4,6}$","placeholder":"212-555-1234","required":false,"type":"tel"},{"fieldSet":2,"id":"collective_type","label":"What type of collective do you represent?","options":["Sports/E-Sports Team","Corporate Entity","Non-Profit Organization","Educational Institution","Special Event Group","Other"],"required":true,"type":"select"},{"fieldSet":2,"id":"garment_type","label":"Specify garment type:","options":["Crewneck T-Shirt","Tank-Top","Crewneck Sweater","Hoodie","Polo Shirt","Windbreaker Jacket","Baseball Cap","Beanie","Other"],"required":true,"type":"select"},{"fieldSet":2,"id":"color","label":"In what color?","options":["Black","White","Grey","Red","Green","Blue","Purple","Pink","Yellow","Orange","Other"],"required":true,"type":"select"},{"fieldSet":2,"id":"quantity","label":"How many?","placeholder":"e.g., 50","required":true,"type":"number"},{"fieldSet":3,"id":"vision","label":"Tell us your vision:","placeholder":"Convey your concept 💭 \\n 〔 99 character min. 〕 \\n \\n Interested in an AI generated custom logo? \\n \\n Where should the designs appear on the garment(s)? \\n \\n Should all items in a style (e.g., shirts, sweaters, hats) be identical or unique? \\n \\n Provide as many details as possible about your design preferences and ideas.","required":true,"type":"textarea"}]'),it=JSON.parse('{"name":"collective cloth","logo":"https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/logos/cycloneStudios.svg","link":"https://www.cyclonestud.io/"}');var st,at,ct,lt,ut,dt,ft;document.getElementById("content").append(function(){var t=document.createElement("header"),e=document.createElement("div");e.setAttribute("class","content-container");var r=X(V,"header-logo","company-logo","Cyclone Studios Logo","Cyclone Studios Logo",["123px","123px"]),n=document.createElement("a");n.setAttribute("id","header-logo-link"),n.setAttribute("href","/"),n.append(r);var o=document.createElement("h4");o.setAttribute("id","header-logo-text"),o.classList.add("company-name"),o.setAttribute("aria-label","Collective Cloth"),o.textContent="collective cloth";var i=document.createElement("div");i.setAttribute("id","header-logo-container"),i.append(n,o);var s,a=function(t){var e=document.createElement("div");e.classList.add("nav-toggle-bars");var r=document.createElement("button");return r.classList.add("nav-toggle-button"),Q(r,{"aria-label":"Open Navigation Menu","aria-expanded":!1,"aria-controls":"nav"}),r.appendChild(e),r}(),c=function(t){var e=document.createElement("nav"),r=document.createElement("ul");return r.classList.add("nav-ul"),t.forEach((function(t){var e=document.createElement("li");e.classList.add("nav-item");var n=document.createElement("a");n.classList.add("nav-link"),n.textContent=t.textContent,n.href=t.href,e.appendChild(n),r.appendChild(e)})),e.appendChild(r),e}(Y);return c.prepend(((s=document.createElement("h2")).setAttribute("id","nav-heading"),s.textContent="Main Menu",s)),e.append(i,a,c),t.append(e),t}(),function(){var t=document.createElement("section");t.setAttribute("id","call-to-action");var e=document.createElement("div");return e.classList.add("content-container"),e.append(function(){var t=document.createElement("div");t.setAttribute("id","call-to-action-left");var e=document.createElement("span");e.classList.add("clipped-text"),e.textContent="show solidarity in style ";var r=document.createElement("span");r.classList.add("emoji","heading-emoji"),r.textContent="😎";var n=document.createElement("h1");n.setAttribute("id","call-to-action-heading"),n.append(e,r);var o=document.createTextNode("implementing "),i=document.createElement("span");i.textContent="AI",i.classList.add("call-to-action-ai");var s=document.createTextNode(" in creative design."),a=document.createElement("h3");a.setAttribute("id","call-to-action-subheading"),a.append(o,i,s);var c=document.createElement("p");c.classList.add("article-text-content"),c.textContent="Our team, a blend of designers, apparel manufacturers, and business experts, specializes in generating bespoke apparel that reflects the distinct identity of each collective we work with.";var l=document.createElement("p");l.classList.add("article-text-content"),l.textContent="We offer a comprehensive service that seamlessly integrates design, production, and delivery, ensuring a tailored experience from start to finish.";var u=document.createElement("article");return u.classList.add("call-to-action-text-content"),u.append(n,a,c,l),t.append(u),t}(),function(){var t=document.createElement("div");t.setAttribute("id","call-to-action-right");var e=X("https://collective-cloth.s3.us-east-2.amazonaws.com/static-assets/product_images/animated/team-capsule-large-animated.webp","call-to-action-product-image","","3-Dimensional Product Showcase","3-Dimensional Product Showcase",["800","800"]);return t.append(e),t}()),t.append(e),t}(),function(t){var e=document.createElement("section");e.setAttribute("id","connections");var r=document.createElement("div");r.classList.add("content-container");var n=document.createElement("div");return n.classList.add("logo-container"),t.forEach((function(t){var e=document.createElement("img");e.classList.add("connection-logo"),e.src=t.logo,e.alt=t.name;var r=document.createElement("a");r.classList.add("connections-link"),r.href=t.link,r.target="_blank",r.rel="noopener noreferrer",r.append(e),n.append(r)})),r.append(n),e.append(r),e}(et),function(t){var e=document.createElement("section");e.setAttribute("id","who-are-we");var r=document.createElement("div");r.classList.add("content-container");var n=tt(t),o=document.createElement("h3");o.setAttribute("id","who-are-we-heading"),o.textContent="Who Are We?";var i=document.createElement("p");i.classList.add("article-text-content"),i.textContent="Conceived to craft custom couture for your collective, our company champions the creation of cohesive, captivating clothing that celebrates your unique camaraderie and character.";var s=document.createElement("p");s.classList.add("article-text-content"),s.textContent="From competitive teams to corporate circles, we commit to customizing chic, comfortable compositions. Utilizing choice materials and cutting-edge design techniques, we convert your vision into a wearable canvas, capturing the essence of your unity.",document.createElement("p").classList.add("article-text-content");var a=document.createElement("article");return a.setAttribute("id","who-are-we-text-content"),a.append(o,i,s),r.append(n,a),e.append(r),e}(rt),function(t){var e=document.createElement("section");e.setAttribute("id","how-does-it-work");var r=document.createElement("div");r.classList.add("content-container");var n=document.createElement("article");n.classList.add("how-does-it-work-text-content");var o=document.createElement("h3");o.setAttribute("id","how-does-it-work-heading"),o.textContent="How Does It Work?",r.append(o);var i=document.createElement("div");return i.setAttribute("id","instructions-container"),t.forEach((function(t,e){var r=document.createElement("article");r.classList.add("instruction-article");var n=document.createElement("div");n.classList.add("step-number"),n.textContent="0".concat(e+1," ");var o=document.createElement("h4");o.classList.add("instruction-number"),o.textContent=t.title;var s=document.createElement("div");s.classList.add("instruction-title-container"),s.append(n,o);var a=document.createElement("div");a.classList.add("instruction-text-content"),t.textContent.forEach((function(t){var e=document.createElement("p");e.classList.add("article-text-content"),e.textContent=t,a.appendChild(e)})),r.append(s,a),i.appendChild(r)})),n.appendChild(i),r.appendChild(n),e.append(r),e}(nt),function(t){var e=document.createElement("section");e.setAttribute("id","start-the-process");var r=document.createElement("div");r.classList.add("content-container");var n=document.createElement("button");n.setAttribute("id","start-the-process-button"),n.textContent="start the process";var o=function(t){var e=document.createElement("h2");e.setAttribute("id","dialog-heading"),e.textContent="The Process";var r=document.createElement("h3");r.setAttribute("id","step-number"),r.textContent="Step 1";var n=document.createElement("button");n.setAttribute("id","dialog-close-button"),n.setAttribute("type","button"),n.setAttribute("aria-label","Close Dialog"),n.textContent="✕";var o=document.createElement("div");o.setAttribute("id","dialog-top-container"),o.append(r,n);var i=document.createElement("button");i.setAttribute("id","previous-button"),i.setAttribute("disabled","true"),i.type="button",i.dataset.element="button",i.textContent="previous";var s=document.createElement("button");s.setAttribute("id","next-button"),s.type="button",s.dataset.element="button",s.textContent="next";var a=document.createElement("button");a.setAttribute("id","submit-button"),a.setAttribute("form","start-the-process-form"),a.setAttribute("type","submit"),a.setAttribute("disabled","true"),a.dataset.element="button",a.textContent="submit";var c=document.createElement("div");c.setAttribute("id","dialog-button-container"),c.append(i,s,a);var l=function(t){var e=document.createElement("fieldset");e.setAttribute("id","field-set-one"),e.classList.add("field-set","active"),e.dataset.fieldSet=1;var r=document.createElement("fieldset");r.setAttribute("id","field-set-two"),r.classList.add("field-set"),r.dataset.fieldSet=2;var n=document.createElement("fieldset");n.setAttribute("id","field-set-three"),n.classList.add("field-set"),n.dataset.fieldSet=3,t.forEach((function(t,o){var i,s=document.createElement("label");if(s.setAttribute("for",t.id),s.textContent=t.label,"select"===t.type){var a=document.createElement("option");a.setAttribute("value",""),a.setAttribute("disabled","true"),a.setAttribute("selected","true"),a.textContent="make a selection",(i=document.createElement("select")).setAttribute("id",t.id),i.setAttribute("name",t.id),i.appendChild(a),t.options.forEach((function(t){var e=document.createElement("option");e.setAttribute("value",t),e.textContent=t,i.appendChild(e)}))}else"textarea"===t.type?((i=document.createElement(t.type)).setAttribute("id",t.id),i.setAttribute("name",t.id),i.setAttribute("minlength",99),i.setAttribute("maxlength",999)):"number"===t.type?((i=document.createElement("input")).setAttribute("id",t.id),i.setAttribute("name",t.id),i.setAttribute("type",t.type),i.setAttribute("min",1)):((i=document.createElement("input")).setAttribute("id",t.id),i.setAttribute("name",t.id),i.setAttribute("type",t.type));if(t.pattern&&i.setAttribute("pattern",i.setAttribute("data-pattern",t.pattern)),t.placeholder&&i.setAttribute("placeholder",t.placeholder),t.required){i.setAttribute("required","true");var c=document.createElement("span");c.classList.add("required-asterisk"),c.textContent="✽ ",c.setAttribute("aria-label","required field asterisk"),s.prepend(c)}var l=document.createElement("div");l.classList.add("field-element-container"),l.append(i);var u=document.createElement("div");u.setAttribute("id","form-field-container-".concat(++o)),u.classList.add("form-field-container"),1===t.fieldSet?u.dataset.fieldSet=1:2===t.fieldSet?u.dataset.fieldSet=2:3===t.fieldSet&&(u.dataset.fieldSet=3),u.append(s,l),1===t.fieldSet?e.appendChild(u):2===t.fieldSet?r.appendChild(u):3===t.fieldSet&&n.appendChild(u)}));var o=document.createElement("p");o.setAttribute("id","form-requirement-text");var i=document.createElement("span");i.classList.add("asterisk-span"),i.textContent="✽",i.setAttribute("aria-label","required field asterisk");var s=document.createTextNode(" ＝ required");o.append(i,s);var a=document.createElement("p");a.setAttribute("id","character-count"),a.textContent="0/99";var c=document.createElement("div");c.setAttribute("id","form-requirements-container"),c.append(o,a);var l=document.createElement("div");l.setAttribute("id","form-field-main-container"),l.append(e,r,n),l.appendChild(c);var u=document.createElement("form");return u.setAttribute("id","start-the-process-form"),u.appendChild(l),u}(t);l.appendChild(c);var u=document.createElement("dialog");return u.setAttribute("id","start-the-process-dialog"),u.append(e,o,l),u}(t);return r.append(n,o),e.append(r),e}(ot),function(t,e){var r=document.createElement("footer"),n=document.createElement("div");if(n.classList.add("content-container"),t.name){var o=(new Date).getFullYear(),i=document.createElement("p");i.setAttribute("id","footer-text"),i.textContent="© ".concat(o," ").concat(t.name),n.appendChild(i)}if(t.logo){var s=document.createElement("img");if(s.setAttribute("id","footer-logo"),s.setAttribute("src",t.logo),s.setAttribute("alt","".concat(t.name," logo")),t.link){var a=document.createElement("a");a.setAttribute("id","footer-logo-link"),a.setAttribute("href",t.link),a.setAttribute("target","_blank"),a.appendChild(s),n.appendChild(a)}else n.appendChild(s)}return r.appendChild(n),r}(it)),dt=document.getElementById("dialog-heading"),lt=dt,ut=document.createDocumentFragment(),lt.textContent.split("").forEach((function(t,e){var r=document.createElement("span");r.setAttribute("id","".concat("split-text","-").concat(e+1)),r.classList.add("letter"),r.textContent=" "===t?" ":t,ut.appendChild(r)})),ft=ut,dt.textContent="",dt.appendChild(ft),document.querySelectorAll('a[href^="#"]').forEach((function(e){e.addEventListener("click",t)})),document.querySelector(".nav-toggle-button").addEventListener("click",i),document.getElementById("start-the-process-button").addEventListener("click",q),document.querySelector('.nav-link[href="#start-the-process"]').addEventListener("click",K),window.addEventListener("load",G),window.addEventListener("resize",G),d(),st=document.querySelectorAll("section"),at=document.querySelectorAll("p"),ct=document.getElementById("start-the-process-button"),st.forEach((function(t){return z.observe(t)})),at.forEach((function(t){return W.observe(t)})),H.observe(ct);var ht=r(837);ht.setApiKey(process.env.SENDGRID_API_KEY),ht.send({to:"johncloud@cyclonestud.io",from:"admin@collectivecloth.com",subject:"Sending with SendGrid is Fun",text:"and easy to do anywhere, even with Node.js",html:"<strong>and easy to do anywhere, even with Node.js</strong>"}).then((function(){console.log("Email sent")})).catch((function(t){console.error(t)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,